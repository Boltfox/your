{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"your your stands for Your Unified Reader. This library reads sigproc filterbanks, psrfits, and psrdada formats and can go from one format to another. Format Read Write filterbank psrfits psrdada The inspiration for the name comes from the Daily Dose of Internet videos . Installation First you need to install psrdada-python . Once psrdada is installed, git clone the repo and use setup.py to install your . git clone https://github.com/devanshkv/your.git cd your python setup.py install","title":"your"},{"location":"#your","text":"your stands for Your Unified Reader. This library reads sigproc filterbanks, psrfits, and psrdada formats and can go from one format to another. Format Read Write filterbank psrfits psrdada The inspiration for the name comes from the Daily Dose of Internet videos .","title":"your"},{"location":"#installation","text":"First you need to install psrdada-python . Once psrdada is installed, git clone the repo and use setup.py to install your . git clone https://github.com/devanshkv/your.git cd your python setup.py install","title":"Installation"},{"location":"sources/your/","text":"Your class your.Your(file) Your class!","title":"Core"},{"location":"sources/your/#your-class","text":"your.Your(file) Your class!","title":"Your class"},{"location":"sources/utils/astro/","text":"dec2deg function your.utils.astro.dec2deg(src_dej) Convert the SIGPROC-style DDMMSS.SSSS declination to degrees Args: src_dej (float): Source dec Returns: ra2deg function your.utils.astro.ra2deg(src_raj) Convert the SIGPROC-style HHMMSS.SSSS right ascension to degrees Args: src_raj (float): Source RA Returns:","title":"Astro"},{"location":"sources/utils/astro/#dec2deg-function","text":"your.utils.astro.dec2deg(src_dej) Convert the SIGPROC-style DDMMSS.SSSS declination to degrees Args: src_dej (float): Source dec Returns:","title":"dec2deg function"},{"location":"sources/utils/astro/#ra2deg-function","text":"your.utils.astro.ra2deg(src_raj) Convert the SIGPROC-style HHMMSS.SSSS right ascension to degrees Args: src_raj (float): Source RA Returns:","title":"ra2deg function"},{"location":"sources/utils/heimdall/","text":"HeimdallManager class your.utils.heimdall.HeimdallManager( dada_key=None, filename=None, verbosity=None, nsamps_gulp=262144, beam=None, baseline_length=2, output_dir=None, dm=None, dm_tol=1.25, zap_chans=None, max_giant_rate=None, dm_nbits=32, gpu_id=None, no_scrunching=False, rfi_tol=5, rfi_no_narrow=False, rfi_no_broad=False, boxcar_max=4096, fswap=None, min_tscrunch_width=None, ) So you want to run heimdall, here is wrapper class which will allow you to do just that. Args: dada_key (hex): use PSRDADA hexidecimal key filename (str): process specified SIGPROC filterbank file verbosity (str): v, V, g, G increase verbosity level nsamps_gulp (int): number of samples to be read at a time beam (int) : over-ride beam number baseline_length (float): number of seconds over which to smooth the baseline output_dir (str) : create all output files in specified path dm (list): min and max DM dm_tol (float): SNR loss tolerance between each DM trial zap_chans (int): zap all channels between start and end channels inclusive max_giant_rate (int): limit the maximum number of individual detections per minute to nevents dm_nbits (int): number of bits per sample in dedispersed time series gpu_id (int): run on specified GPU no_scrunching (bool): don't use an adaptive time scrunching during dedispersion rfi_tol (float): RFI exicision threshold limits rfi_no_narrow (bool): disable narrow band RFI excision rfi_no_broad (bool): disable 0-DM RFI excision boxcar_max (int): maximum boxcar width in samples fswap (bool): swap channel ordering for negative DM - SIGPROC 2,4 or 8 bit only min_tscrunch_width: vary between high quality (large value) and high performance (low value)","title":"Heimdall"},{"location":"sources/utils/heimdall/#heimdallmanager-class","text":"your.utils.heimdall.HeimdallManager( dada_key=None, filename=None, verbosity=None, nsamps_gulp=262144, beam=None, baseline_length=2, output_dir=None, dm=None, dm_tol=1.25, zap_chans=None, max_giant_rate=None, dm_nbits=32, gpu_id=None, no_scrunching=False, rfi_tol=5, rfi_no_narrow=False, rfi_no_broad=False, boxcar_max=4096, fswap=None, min_tscrunch_width=None, ) So you want to run heimdall, here is wrapper class which will allow you to do just that. Args: dada_key (hex): use PSRDADA hexidecimal key filename (str): process specified SIGPROC filterbank file verbosity (str): v, V, g, G increase verbosity level nsamps_gulp (int): number of samples to be read at a time beam (int) : over-ride beam number baseline_length (float): number of seconds over which to smooth the baseline output_dir (str) : create all output files in specified path dm (list): min and max DM dm_tol (float): SNR loss tolerance between each DM trial zap_chans (int): zap all channels between start and end channels inclusive max_giant_rate (int): limit the maximum number of individual detections per minute to nevents dm_nbits (int): number of bits per sample in dedispersed time series gpu_id (int): run on specified GPU no_scrunching (bool): don't use an adaptive time scrunching during dedispersion rfi_tol (float): RFI exicision threshold limits rfi_no_narrow (bool): disable narrow band RFI excision rfi_no_broad (bool): disable 0-DM RFI excision boxcar_max (int): maximum boxcar width in samples fswap (bool): swap channel ordering for negative DM - SIGPROC 2,4 or 8 bit only min_tscrunch_width: vary between high quality (large value) and high performance (low value)","title":"HeimdallManager class"},{"location":"sources/utils/math/","text":"closest_number function your.utils.math.closest_number(big_num, small_num) Finds the difference between the closest multiple of a smaller number with respect to a bigger number Args: big_num: The bigger number to find the closest of small_num: Number whose multiple is to be found and subtracted Returns: the difference between the closest multiple of a smaller number with respect to a bigger number primes function your.utils.math.primes(n) All the prime factors of a positive number Args: n: a positive number Returns: primes closest_divisor function your.utils.math.closest_divisor(n, m) Calculates the divisor of n, which is closest to (i.e bigger than) m Args: n: larger number of which divisor is to be found m: divisor closest to this number Returns: the divisor of n, which is closest to (i.e bigger than) m find_gcd function your.utils.math.find_gcd(list_of_nos) Greatest Common Divisor for a list of nos Args: list_of_nos: list of numbers Returns: GCD normalise function your.utils.math.normalise(data) Subtract median, divide by standard deviations Args: data: data Returns: normalised data","title":"Math"},{"location":"sources/utils/math/#closest_number-function","text":"your.utils.math.closest_number(big_num, small_num) Finds the difference between the closest multiple of a smaller number with respect to a bigger number Args: big_num: The bigger number to find the closest of small_num: Number whose multiple is to be found and subtracted Returns: the difference between the closest multiple of a smaller number with respect to a bigger number","title":"closest_number function"},{"location":"sources/utils/math/#primes-function","text":"your.utils.math.primes(n) All the prime factors of a positive number Args: n: a positive number Returns: primes","title":"primes function"},{"location":"sources/utils/math/#closest_divisor-function","text":"your.utils.math.closest_divisor(n, m) Calculates the divisor of n, which is closest to (i.e bigger than) m Args: n: larger number of which divisor is to be found m: divisor closest to this number Returns: the divisor of n, which is closest to (i.e bigger than) m","title":"closest_divisor function"},{"location":"sources/utils/math/#find_gcd-function","text":"your.utils.math.find_gcd(list_of_nos) Greatest Common Divisor for a list of nos Args: list_of_nos: list of numbers Returns: GCD","title":"find_gcd function"},{"location":"sources/utils/math/#normalise-function","text":"your.utils.math.normalise(data) Subtract median, divide by standard deviations Args: data: data Returns: normalised data","title":"normalise function"},{"location":"sources/utils/plotter/","text":"figsize function your.utils.plotter.figsize(scale, width_by_height_ratio) Create figure size either a full page or a half page figure Args: scale (float): 0.5 for half page figure, 1 for full page width_by_height_ratio (float): ratio of width to height for the figure Returns: list of width and height get_params function your.utils.plotter.get_params(scale=0.5, width_by_height_ratio=1) Create a dictionary for pretty plotting Args: scale (float): 0.5 for half page figure, 1 for full page width_by_height_ratio (float): ratio of width to height for the figure Returns: dictionary of parameters plot_h5 function your.utils.plotter.plot_h5(h5_file, save=True, detrend_ft=True, publication=False) Plot the h5 candidates Args: h5_file (str): Name of the h5 file save (bool): Save the file as a png detrend_ft (bool): detrend the frequency time plot publication (bool): make publication quality plot Returns: None","title":"Plotter"},{"location":"sources/utils/plotter/#figsize-function","text":"your.utils.plotter.figsize(scale, width_by_height_ratio) Create figure size either a full page or a half page figure Args: scale (float): 0.5 for half page figure, 1 for full page width_by_height_ratio (float): ratio of width to height for the figure Returns: list of width and height","title":"figsize function"},{"location":"sources/utils/plotter/#get_params-function","text":"your.utils.plotter.get_params(scale=0.5, width_by_height_ratio=1) Create a dictionary for pretty plotting Args: scale (float): 0.5 for half page figure, 1 for full page width_by_height_ratio (float): ratio of width to height for the figure Returns: dictionary of parameters","title":"get_params function"},{"location":"sources/utils/plotter/#plot_h5-function","text":"your.utils.plotter.plot_h5(h5_file, save=True, detrend_ft=True, publication=False) Plot the h5 candidates Args: h5_file (str): Name of the h5 file save (bool): Save the file as a png detrend_ft (bool): detrend the frequency time plot publication (bool): make publication quality plot Returns: None","title":"plot_h5 function"},{"location":"sources/utils/rfi/","text":"savgol_filter function your.utils.rfi.savgol_filter(data, foff, fw=15, sig=6) Apply savgol filter to the data Args: data (numpy.ndarray): bandpass of the data foff (float): channel bandwidth (MHz) fw (float): frequency window (MHz) sig (float): sigma value to apply cutoff on Returns (numpy.ndarray): mask for channels spectral_kurtosis function your.utils.rfi.spectral_kurtosis(data, N=1, d=None) Compute spectral kurtosis Args: data (numpy.ndarray): 2D frequency time data N (int): Number of accumulations on the FPGA d (float): shape factor Returns (numpy.ndarray): Spectral Kurtosis along frequency axis","title":"RFI"},{"location":"sources/utils/rfi/#savgol_filter-function","text":"your.utils.rfi.savgol_filter(data, foff, fw=15, sig=6) Apply savgol filter to the data Args: data (numpy.ndarray): bandpass of the data foff (float): channel bandwidth (MHz) fw (float): frequency window (MHz) sig (float): sigma value to apply cutoff on Returns (numpy.ndarray): mask for channels","title":"savgol_filter function"},{"location":"sources/utils/rfi/#spectral_kurtosis-function","text":"your.utils.rfi.spectral_kurtosis(data, N=1, d=None) Compute spectral kurtosis Args: data (numpy.ndarray): 2D frequency time data N (int): Number of accumulations on the FPGA d (float): shape factor Returns (numpy.ndarray): Spectral Kurtosis along frequency axis","title":"spectral_kurtosis function"}]}
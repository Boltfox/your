{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"your your stands for Your Unified Reader. This library reads sigproc filterbanks, psrfits, and psrdada formats and can go from one format to another. Format Read Write filterbank :white_check_mark: :white_check_mark: psrfits :white_check_mark: :x: psrdada :x: :white_check_mark: The inspiration for the name comes for the Daily Dose of Internet videos . Installation First you need to install psrdada-python . Once psrdada is installed, git clone the repo and use setup.py to install your . git clone https://github.com/devanshkv/your.git cd your python setup.py install","title":"your"},{"location":"#your","text":"your stands for Your Unified Reader. This library reads sigproc filterbanks, psrfits, and psrdada formats and can go from one format to another. Format Read Write filterbank :white_check_mark: :white_check_mark: psrfits :white_check_mark: :x: psrdada :x: :white_check_mark: The inspiration for the name comes for the Daily Dose of Internet videos .","title":"your"},{"location":"#installation","text":"First you need to install psrdada-python . Once psrdada is installed, git clone the repo and use setup.py to install your . git clone https://github.com/devanshkv/your.git cd your python setup.py install","title":"Installation"},{"location":"sources/your/","text":"Your class your.Your(file) Your class!","title":"Core"},{"location":"sources/your/#your-class","text":"your.Your(file) Your class!","title":"Your class"},{"location":"sources/utils/astro/","text":"dec2deg function your.utils.astro.dec2deg(src_dej) Convert the SIGPROC-style DDMMSS.SSSS declination to degrees Args: src_dej (float): Source dec Returns: ra2deg function your.utils.astro.ra2deg(src_raj) Convert the SIGPROC-style HHMMSS.SSSS right ascension to degrees Args: src_raj (float): Source RA Returns:","title":"Astro"},{"location":"sources/utils/astro/#dec2deg-function","text":"your.utils.astro.dec2deg(src_dej) Convert the SIGPROC-style DDMMSS.SSSS declination to degrees Args: src_dej (float): Source dec Returns:","title":"dec2deg function"},{"location":"sources/utils/astro/#ra2deg-function","text":"your.utils.astro.ra2deg(src_raj) Convert the SIGPROC-style HHMMSS.SSSS right ascension to degrees Args: src_raj (float): Source RA Returns:","title":"ra2deg function"},{"location":"sources/utils/plotter/","text":"figsize function your.utils.plotter.figsize(scale, width_by_height_ratio) Create figure size either a full page or a half page figure Args: scale (float): 0.5 for half page figure, 1 for full page width_by_height_ratio (float): ratio of width to height for the figure Returns: list of width and height get_params function your.utils.plotter.get_params(scale=0.5, width_by_height_ratio=1) Create a dictionary for pretty plotting Args: scale (float): 0.5 for half page figure, 1 for full page width_by_height_ratio (float): ratio of width to height for the figure Returns: dictionary of parameters plot_h5 function your.utils.plotter.plot_h5(h5_file, save=True, detrend_ft=True, publication=False) Plot the h5 candidates Args: h5_file (str): Name of the h5 file save (bool): Save the file as a png detrend_ft (bool): detrend the frequency time plot publication (bool): make publication quality plot Returns: None","title":"Plotter"},{"location":"sources/utils/plotter/#figsize-function","text":"your.utils.plotter.figsize(scale, width_by_height_ratio) Create figure size either a full page or a half page figure Args: scale (float): 0.5 for half page figure, 1 for full page width_by_height_ratio (float): ratio of width to height for the figure Returns: list of width and height","title":"figsize function"},{"location":"sources/utils/plotter/#get_params-function","text":"your.utils.plotter.get_params(scale=0.5, width_by_height_ratio=1) Create a dictionary for pretty plotting Args: scale (float): 0.5 for half page figure, 1 for full page width_by_height_ratio (float): ratio of width to height for the figure Returns: dictionary of parameters","title":"get_params function"},{"location":"sources/utils/plotter/#plot_h5-function","text":"your.utils.plotter.plot_h5(h5_file, save=True, detrend_ft=True, publication=False) Plot the h5 candidates Args: h5_file (str): Name of the h5 file save (bool): Save the file as a png detrend_ft (bool): detrend the frequency time plot publication (bool): make publication quality plot Returns: None","title":"plot_h5 function"},{"location":"sources/utils/rfi/","text":"savgol_filter function your.utils.rfi.savgol_filter(data, foff, fw=15, sig=6) Apply savgol filter to the data Args: data (numpy.ndarray): bandpass of the data foff (float): channel bandwidth (MHz) fw (float): frequency window (MHz) sig (float): sigma value to apply cutoff on Returns (numpy.ndarray): mask for channels spectral_kurtosis function your.utils.rfi.spectral_kurtosis(data, N=1, d=None) Compute spectral kurtosis Args: data (numpy.ndarray): 2D frequency time data N (int): Number of accumulations on the FPGA d (float): shape factor Returns (numpy.ndarray): Spectral Kurtosis along frequency axis","title":"RFI"},{"location":"sources/utils/rfi/#savgol_filter-function","text":"your.utils.rfi.savgol_filter(data, foff, fw=15, sig=6) Apply savgol filter to the data Args: data (numpy.ndarray): bandpass of the data foff (float): channel bandwidth (MHz) fw (float): frequency window (MHz) sig (float): sigma value to apply cutoff on Returns (numpy.ndarray): mask for channels","title":"savgol_filter function"},{"location":"sources/utils/rfi/#spectral_kurtosis-function","text":"your.utils.rfi.spectral_kurtosis(data, N=1, d=None) Compute spectral kurtosis Args: data (numpy.ndarray): 2D frequency time data N (int): Number of accumulations on the FPGA d (float): shape factor Returns (numpy.ndarray): Spectral Kurtosis along frequency axis","title":"spectral_kurtosis function"}]}
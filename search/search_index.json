{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"your your stands for Your Unified Reader. This library reads sigproc filterbanks, psrfits, and psrdada formats and can go from one format to another. Format Read Write filterbank psrfits psrdada The inspiration for the name comes from the Daily Dose of Internet videos . Installation First you need to install psrdada-python . Once psrdada is installed, git clone the repo and use setup.py to install your . git clone https://github.com/devanshkv/your.git cd your python setup.py install Have a look at our docs for the basic documentation. We will add more details shortly.","title":"your"},{"location":"#your","text":"your stands for Your Unified Reader. This library reads sigproc filterbanks, psrfits, and psrdada formats and can go from one format to another. Format Read Write filterbank psrfits psrdada The inspiration for the name comes from the Daily Dose of Internet videos .","title":"your"},{"location":"#installation","text":"First you need to install psrdada-python . Once psrdada is installed, git clone the repo and use setup.py to install your . git clone https://github.com/devanshkv/your.git cd your python setup.py install Have a look at our docs for the basic documentation. We will add more details shortly.","title":"Installation"},{"location":"candidate/","text":"Candidate your . candidate . Candidate ( fp = None , dm = None , tcand = 0 , width = 0 , label =- 1 , snr = 0 , min_samp = 256 , device = 0 , kill_mask = None ) Candidate Class Args: fp : String or a list of files. It can either filterbank or psrfits files. dm (float): Dispersion Measure of the candidate tcand (float): start time of the candidate in seconds width (int): pulse width of the candidate in samples label (int): 1 for pulsars/FRBs, 0 for RFI snr (float): Signal to Noise Ratio min_samp (int): Minimum number of time samples device (int): GPU ID if using GPUs kill_mask (numpy.ndarray): Boolean mask of channels to kill save_h5 Candidate . save_h5 ( out_dir = None , fnout = None ) Save the candidate to a hdf5 file Args: out_dir (str): path to the output directory fnout (str): output name of the file Returns: str: output name of the file dispersion_delay Candidate . dispersion_delay ( dms = None ) Caluclaute the dispersion delay for the candidate DM or at given dispersion DM Args: dms (Union[float,np.ndarray]) : DM or a list of DMs Returns: Union[float, np.ndarray]: dispersion delay in seconds get_chunk Candidate . get_chunk ( tstart = None , tstop = None ) Get a chunk of data. The data is saved in self.data . Args: tstart (float): start time of the chunk in seconds tstop (float): stop time of the chunk in secons dedisperse Candidate . dedisperse ( dms = None , target = \"CPU\" ) Dedisperse a chunk of data. Saves the dedispersed chunk in self.dedispersed . Args: dms (float): The DM to dedisperse the data at. target (str): 'CPU' to run the code on the CPU or 'GPU' to run it on a GPU. dedispersets Candidate . dedispersets ( dms = None ) Create a dedispersed time series Args: dms (float): The DM to dedisperse the data at. Returns: numpy.ndarray: Dedispersed time series. dmtime Candidate . dmtime ( dmsteps = 256 , target = \"CPU\" ) Generates DM-time array of the candidate by dedispersing at adjacent DM values. Saves the data in self.dmt . Args: dmsteps (int) : Number of DMs to dedisperse at. target (str): 'CPU' to run the code on the CPU or 'GPU' to run it on a GPU. get_snr Candidate . get_snr ( time_series = None ) Calculates the SNR of the candidate Args: time_series: time series array to calculate the SNR of Returns: float: SNR optimize_dm Candidate . optimize_dm () Calculate more precise value of the DM by interpolating between DM values to maximise the SNR Note: This function has not been fully tested. Returns: optimnised DM, optimised SNR decimate Candidate . decimate ( key , decimate_factor , axis , pad = False , ** kwargs ) Decimate FT or DMT data. Todo: * Update candidate parameters as per decimation factor Args: key (str): Keywords to chose which data to decimate ('dmt' or 'ft') decimate_factor (int): Number of samples to average axis (int): Axis to decimate along pad (bool): Optional argument if padding is to be done **kwargs: kwargs for numpy.pad resize Candidate . resize ( key , size , axis , ** kwargs ) Resize FT or DMT data Todo: * Update candidate parameters as per final size Args: key (str): Keywords to chose which data to resize ('dmt' or 'ft') size: Final size of the data array required axis (int) : Axis to resize alone **kwargs: Arguments for skimage.transform resize function","title":"Candiate"},{"location":"candidate/#candidate","text":"your . candidate . Candidate ( fp = None , dm = None , tcand = 0 , width = 0 , label =- 1 , snr = 0 , min_samp = 256 , device = 0 , kill_mask = None ) Candidate Class Args: fp : String or a list of files. It can either filterbank or psrfits files. dm (float): Dispersion Measure of the candidate tcand (float): start time of the candidate in seconds width (int): pulse width of the candidate in samples label (int): 1 for pulsars/FRBs, 0 for RFI snr (float): Signal to Noise Ratio min_samp (int): Minimum number of time samples device (int): GPU ID if using GPUs kill_mask (numpy.ndarray): Boolean mask of channels to kill","title":"Candidate"},{"location":"candidate/#save_h5","text":"Candidate . save_h5 ( out_dir = None , fnout = None ) Save the candidate to a hdf5 file Args: out_dir (str): path to the output directory fnout (str): output name of the file Returns: str: output name of the file","title":"save_h5"},{"location":"candidate/#dispersion_delay","text":"Candidate . dispersion_delay ( dms = None ) Caluclaute the dispersion delay for the candidate DM or at given dispersion DM Args: dms (Union[float,np.ndarray]) : DM or a list of DMs Returns: Union[float, np.ndarray]: dispersion delay in seconds","title":"dispersion_delay"},{"location":"candidate/#get_chunk","text":"Candidate . get_chunk ( tstart = None , tstop = None ) Get a chunk of data. The data is saved in self.data . Args: tstart (float): start time of the chunk in seconds tstop (float): stop time of the chunk in secons","title":"get_chunk"},{"location":"candidate/#dedisperse","text":"Candidate . dedisperse ( dms = None , target = \"CPU\" ) Dedisperse a chunk of data. Saves the dedispersed chunk in self.dedispersed . Args: dms (float): The DM to dedisperse the data at. target (str): 'CPU' to run the code on the CPU or 'GPU' to run it on a GPU.","title":"dedisperse"},{"location":"candidate/#dedispersets","text":"Candidate . dedispersets ( dms = None ) Create a dedispersed time series Args: dms (float): The DM to dedisperse the data at. Returns: numpy.ndarray: Dedispersed time series.","title":"dedispersets"},{"location":"candidate/#dmtime","text":"Candidate . dmtime ( dmsteps = 256 , target = \"CPU\" ) Generates DM-time array of the candidate by dedispersing at adjacent DM values. Saves the data in self.dmt . Args: dmsteps (int) : Number of DMs to dedisperse at. target (str): 'CPU' to run the code on the CPU or 'GPU' to run it on a GPU.","title":"dmtime"},{"location":"candidate/#get_snr","text":"Candidate . get_snr ( time_series = None ) Calculates the SNR of the candidate Args: time_series: time series array to calculate the SNR of Returns: float: SNR","title":"get_snr"},{"location":"candidate/#optimize_dm","text":"Candidate . optimize_dm () Calculate more precise value of the DM by interpolating between DM values to maximise the SNR Note: This function has not been fully tested. Returns: optimnised DM, optimised SNR","title":"optimize_dm"},{"location":"candidate/#decimate","text":"Candidate . decimate ( key , decimate_factor , axis , pad = False , ** kwargs ) Decimate FT or DMT data. Todo: * Update candidate parameters as per decimation factor Args: key (str): Keywords to chose which data to decimate ('dmt' or 'ft') decimate_factor (int): Number of samples to average axis (int): Axis to decimate along pad (bool): Optional argument if padding is to be done **kwargs: kwargs for numpy.pad","title":"decimate"},{"location":"candidate/#resize","text":"Candidate . resize ( key , size , axis , ** kwargs ) Resize FT or DMT data Todo: * Update candidate parameters as per final size Args: key (str): Keywords to chose which data to resize ('dmt' or 'ft') size: Final size of the data array required axis (int) : Axis to resize alone **kwargs: Arguments for skimage.transform resize function","title":"resize"},{"location":"writer/","text":"to_fil Writer . to_fil ( nstart = None , nsamp = None , c = None , outdir = None , outname = None , flag_rfi = False , progress = None , sk_sig = 4 , sg_fw = 15 , sg_sig = 4 , zero_dm_subt = False , ) Writes out a Filterbank File. Args: nstart: Start sample to read from nsamp: Number of samples to write c: Required frequency channel range outdir: Output directory for Filterbank file outname: Name of the Filterbank file to write to progress: turn on/off progress bar flag_rfi: To turn on RFI flagging sk_sig: sigma for spectral kurtosis filter sg_fw: filter window for savgol filter sg_sig: sigma for savgol filter zero_dm_subt: enable zero DM rfi excision to_fits Writer . to_fits ( npsub =- 1 , outdir = None , outname = None , progress = None , flag_rfi = False , sk_sig = 4 , sg_fw = 15 , sg_sig = 4 , zero_dm_subt = False , ) Writes out a fits file Args: npsub: Number of spectra per subint outdir: Output directory for Filterbank file outname: Name of the PSRFITS file to write to progress: turn on/off progress bar flag_rfi: To turn on RFI flagging sk_sig: sigma for spectral kurtosis filter sg_fw: filter window for savgol filter sg_sig: sigma for savgol filter zero_dm_subt: enable zero DM rfi excision","title":"Writer"},{"location":"writer/#to_fil","text":"Writer . to_fil ( nstart = None , nsamp = None , c = None , outdir = None , outname = None , flag_rfi = False , progress = None , sk_sig = 4 , sg_fw = 15 , sg_sig = 4 , zero_dm_subt = False , ) Writes out a Filterbank File. Args: nstart: Start sample to read from nsamp: Number of samples to write c: Required frequency channel range outdir: Output directory for Filterbank file outname: Name of the Filterbank file to write to progress: turn on/off progress bar flag_rfi: To turn on RFI flagging sk_sig: sigma for spectral kurtosis filter sg_fw: filter window for savgol filter sg_sig: sigma for savgol filter zero_dm_subt: enable zero DM rfi excision","title":"to_fil"},{"location":"writer/#to_fits","text":"Writer . to_fits ( npsub =- 1 , outdir = None , outname = None , progress = None , flag_rfi = False , sk_sig = 4 , sg_fw = 15 , sg_sig = 4 , zero_dm_subt = False , ) Writes out a fits file Args: npsub: Number of spectra per subint outdir: Output directory for Filterbank file outname: Name of the PSRFITS file to write to progress: turn on/off progress bar flag_rfi: To turn on RFI flagging sk_sig: sigma for spectral kurtosis filter sg_fw: filter window for savgol filter sg_sig: sigma for savgol filter zero_dm_subt: enable zero DM rfi excision","title":"to_fits"},{"location":"your/","text":"Your your . Your ( file ) Your class. Args: file : String or a list of files. It can either filterbank or psrfits files. Examples: your_object = your.Your(\"/path/to/filterbank.fil\") your_object = your.Your([\"puppi_58763_B1919+21_0292_0001.fits\",\"puppi_58763_B1919+21_0292_0002.fits\"] Attributes: isfits (bool): your object made from fits files isfil (bool) : your object makde from filterbank file your_header : instance of the Header class bandpass Your . bandpass ( nspectra = None ) Create the bandpass of the file Args: nspectra (int): Number of spectra to create bandpass from. Returns: numpy.ndarray: bandpass array get_data Your . get_data ( nstart , nsamp , time_decimation_factor = None , frequency_decimation_factor = None , pol = 0 ) Read data from files Args: nstart (int): start sample nsamp (int): number of samples to read time_decimation_factor (int): decimate in time with this factor frequency_decimation_factor (int): decimate in frequency with this factor pol (int): which polarization to chose Note: Both decimation factors should exactly device the nsamp or nchans Returns: numpy.ndarray: 2D numpy array of data dispersion_delay Your . dispersion_delay ( dms = 5000 ) Calculate the dispersion delay in seconds for the given configuration Args: dms: DM or a list of DM values Returns: Dispersion delay in seconds. Header your . Header ( your ) Your Header class, it contains all the relevant metadata. Args: Your object Attributes: filelist: List of files used to make the your object filename (str) : Name of the first file used to make the object basename (str): Base name of file source_name (str): Source Name ra_deg (float): RA of the source in degrees dec_deg (float): Dec of the source in degrees bw (float): bandwidth of the data center_freq (float): Center frequency of the data. time_decimation_factor (int): Number of time samples to average frequency_decimation_factor (int): Number of frequency channels to average native_tsamp (float): Sampling time of the data pre decimation (seconds) native_foff (float): Channel bandwidth of the data pre decimation (MHz) native_nchans : Number of channels in the data pre decimation native_nspectra: Number of spectra in the data pre decimation dtype: dtype of the (read) data nbits (int): Number of bits in the data tstart (float): Start MJD of the data fch1 (float): Frequency of the first channel (MHz) npol (int) : Number of polarisations in the data","title":"Your"},{"location":"your/#your","text":"your . Your ( file ) Your class. Args: file : String or a list of files. It can either filterbank or psrfits files. Examples: your_object = your.Your(\"/path/to/filterbank.fil\") your_object = your.Your([\"puppi_58763_B1919+21_0292_0001.fits\",\"puppi_58763_B1919+21_0292_0002.fits\"] Attributes: isfits (bool): your object made from fits files isfil (bool) : your object makde from filterbank file your_header : instance of the Header class","title":"Your"},{"location":"your/#bandpass","text":"Your . bandpass ( nspectra = None ) Create the bandpass of the file Args: nspectra (int): Number of spectra to create bandpass from. Returns: numpy.ndarray: bandpass array","title":"bandpass"},{"location":"your/#get_data","text":"Your . get_data ( nstart , nsamp , time_decimation_factor = None , frequency_decimation_factor = None , pol = 0 ) Read data from files Args: nstart (int): start sample nsamp (int): number of samples to read time_decimation_factor (int): decimate in time with this factor frequency_decimation_factor (int): decimate in frequency with this factor pol (int): which polarization to chose Note: Both decimation factors should exactly device the nsamp or nchans Returns: numpy.ndarray: 2D numpy array of data","title":"get_data"},{"location":"your/#dispersion_delay","text":"Your . dispersion_delay ( dms = 5000 ) Calculate the dispersion delay in seconds for the given configuration Args: dms: DM or a list of DM values Returns: Dispersion delay in seconds.","title":"dispersion_delay"},{"location":"your/#header","text":"your . Header ( your ) Your Header class, it contains all the relevant metadata. Args: Your object Attributes: filelist: List of files used to make the your object filename (str) : Name of the first file used to make the object basename (str): Base name of file source_name (str): Source Name ra_deg (float): RA of the source in degrees dec_deg (float): Dec of the source in degrees bw (float): bandwidth of the data center_freq (float): Center frequency of the data. time_decimation_factor (int): Number of time samples to average frequency_decimation_factor (int): Number of frequency channels to average native_tsamp (float): Sampling time of the data pre decimation (seconds) native_foff (float): Channel bandwidth of the data pre decimation (MHz) native_nchans : Number of channels in the data pre decimation native_nspectra: Number of spectra in the data pre decimation dtype: dtype of the (read) data nbits (int): Number of bits in the data tstart (float): Start MJD of the data fch1 (float): Frequency of the first channel (MHz) npol (int) : Number of polarisations in the data","title":"Header"},{"location":"bin/your_bandpass/","text":"usage: your_bandpass.py [-h] -f FILES [FILES ...] [-n NSPECTRA] [-t TIME] [-b NAME] Arguments Short Long Default Description -h --help show this help message and exit -f --files None Fits or filterbank files to read. -n --nspectra 8192 Number of spectra to use for bandpass. -t --time 0 Time (s) to use for bandpass. -b --name None Name of bandpass png","title":"your_bandpass.py"},{"location":"bin/your_bandpass/#arguments","text":"Short Long Default Description -h --help show this help message and exit -f --files None Fits or filterbank files to read. -n --nspectra 8192 Number of spectra to use for bandpass. -t --time 0 Time (s) to use for bandpass. -b --name None Name of bandpass png","title":"Arguments"},{"location":"bin/your_candmaker/","text":"usage: your_candmaker.py [-h] [-v] [-fs FREQUENCY_SIZE] [-g GPU_ID [GPU_ID ...]] [-ts TIME_SIZE] -c CAND_PARAM_FILE [-n NPROC] [-o FOUT] [-opt] Arguments Short Long Default Description -h --help show this help message and exit -v --verbose Be verbose -fs --frequency_size 256 Frequency size after rebinning -g --gpu_id [-1] GPU ID (use -1 for CPU). To use multiple GPUs (say with id 2 and 3 use -g 2 3 -ts --time_size 256 Time length after rebinning -c --cand_param_file None csv file with candidate parameters -n --nproc 2 number of processors to use in parallel (default: 2) -o --fout . Output file directory for candidate h5 -opt --opt_dm Optimise DM","title":"your_candmaker.py"},{"location":"bin/your_candmaker/#arguments","text":"Short Long Default Description -h --help show this help message and exit -v --verbose Be verbose -fs --frequency_size 256 Frequency size after rebinning -g --gpu_id [-1] GPU ID (use -1 for CPU). To use multiple GPUs (say with id 2 and 3 use -g 2 3 -ts --time_size 256 Time length after rebinning -c --cand_param_file None csv file with candidate parameters -n --nproc 2 number of processors to use in parallel (default: 2) -o --fout . Output file directory for candidate h5 -opt --opt_dm Optimise DM","title":"Arguments"},{"location":"bin/your_combine_mocks/","text":"usage: your_combine_mocks.py [-h] [-v] [-f1 FIRST_BAND] [-f2 SECOND_BAND] [-s NSTART] [-n NSAMP] [-o OUTDIR] [-fil FIL_NAME] [-a ALL_FILES] Arguments Short Long Default Description -h --help show this help message and exit -v --verbose Be verbose -f1 --first_band None Path of files containing one band -f2 --second_band None Path of files containing second band -s --nstart 0 Start sample number -n --nsamp -1 Number of samples to read (-1: whole file) -o --outdir . Output directory for Filterbank file -fil --fil_name None Output name of the Filterbank file -a --all_files None Process all files in the given directory","title":"your_combine_mocks.py"},{"location":"bin/your_combine_mocks/#arguments","text":"Short Long Default Description -h --help show this help message and exit -v --verbose Be verbose -f1 --first_band None Path of files containing one band -f2 --second_band None Path of files containing second band -s --nstart 0 Start sample number -n --nsamp -1 Number of samples to read (-1: whole file) -o --outdir . Output directory for Filterbank file -fil --fil_name None Output name of the Filterbank file -a --all_files None Process all files in the given directory","title":"Arguments"},{"location":"bin/your_h5plotter/","text":"usage: your_h5plotter.py [-h] [-v] [-f FILES [FILES ...]] [-c RESULTS_CSV] [--publish] [--no_detrend_ft] [--no_save] [-o OUT_DIR] [-mad [MAD_FILTER]] [-n NPROC] [--no_progress] Arguments Short Long Default Description -h --help show this help message and exit -v --verbose Be verbose -f --files None h5 files to be plotted -c --results_csv None Plot positives in results.csv --publish Make publication quality plots --no_detrend_ft Detrend the frequency-time plot --no_save Do not save the plot -o --out_dir None Directory to save pngs (default: h5 dir) -mad --mad_filter Median Absolute Deviation spectal clipper, default 3 sigma -n --nproc 4 Number of processors to use in parallel (default: 4) --no_progress None Do not show the tqdm bar","title":"your_h5plotter.py"},{"location":"bin/your_h5plotter/#arguments","text":"Short Long Default Description -h --help show this help message and exit -v --verbose Be verbose -f --files None h5 files to be plotted -c --results_csv None Plot positives in results.csv --publish Make publication quality plots --no_detrend_ft Detrend the frequency-time plot --no_save Do not save the plot -o --out_dir None Directory to save pngs (default: h5 dir) -mad --mad_filter Median Absolute Deviation spectal clipper, default 3 sigma -n --nproc 4 Number of processors to use in parallel (default: 4) --no_progress None Do not show the tqdm bar","title":"Arguments"},{"location":"bin/your_header/","text":"usage: your_header.py [-h] -f FILES [FILES ...] Arguments Short Long Default Description -h --help show this help message and exit -f --files None Fits or filterbank files to read header.","title":"your_header.py"},{"location":"bin/your_header/#arguments","text":"Short Long Default Description -h --help show this help message and exit -f --files None Fits or filterbank files to read header.","title":"Arguments"},{"location":"bin/your_heimdall/","text":"usage: your_heimdall.py [-h] [-v] [-p PROBABILITY] [-f FILES [FILES ...]] [-dm DM DM] [-g GPU_ID] [-sg] [-fw FILTER_WINDOW] [-sig SIGMA] [-m MASK] [-dm_tol DM_TOL] [-rfi_no_narrow] [-rfi_no_broad] [-o OUTPUT_DIR] [--no_progress] Arguments Short Long Default Description -h --help show this help message and exit -v --verbose Be verbose -p --probability 0.5 Detection threshold -f --files None filterbank or psrfits -dm --dm [10, 1000] DM (eg -dm 10 1000) -g --gpu_id 0 GPU ID to run heimdall on -sg --apply_savgol Apply savgol filter to zap bad channels -fw --filter_window 15 Window size (MHz) for savgol filter -sig --sigma 6 Sigma for the savgol filter -m --mask None Input RFI mask (could be 1-D bad channel mask or 2-D FT mask) -dm_tol --dm_tol 1.25 SNR loss tolerance between DM trials -rfi_no_narrow --rfi_no_narrow disable narrow band RFI excision -rfi_no_broad --rfi_no_broad disable 0-DM RFI excision -o --output_dir None Output dir for heimdall candidates --no_progress None Do not show the tqdm bar","title":"your_heimdall.py"},{"location":"bin/your_heimdall/#arguments","text":"Short Long Default Description -h --help show this help message and exit -v --verbose Be verbose -p --probability 0.5 Detection threshold -f --files None filterbank or psrfits -dm --dm [10, 1000] DM (eg -dm 10 1000) -g --gpu_id 0 GPU ID to run heimdall on -sg --apply_savgol Apply savgol filter to zap bad channels -fw --filter_window 15 Window size (MHz) for savgol filter -sig --sigma 6 Sigma for the savgol filter -m --mask None Input RFI mask (could be 1-D bad channel mask or 2-D FT mask) -dm_tol --dm_tol 1.25 SNR loss tolerance between DM trials -rfi_no_narrow --rfi_no_narrow disable narrow band RFI excision -rfi_no_broad --rfi_no_broad disable 0-DM RFI excision -o --output_dir None Output dir for heimdall candidates --no_progress None Do not show the tqdm bar","title":"Arguments"},{"location":"bin/your_rfimask/","text":"usage: your_rfimask.py [-h] [-f FILES [FILES ...]] [-sg] [-fw FILTER_WINDOW [FILTER_WINDOW ...]] [-sig SIGMA [SIGMA ...]] [-o OUTPUT_DIR] Arguments Short Long Default Description -h --help show this help message and exit -f --files None filterbank or psrfits -sg --apply_savgol Apply savgol filter to zap bad channels -fw --filter_window [15] Window size (MHz) for savgol filter -sig --sigma [6] Sigma for the savgol filter -o --output_dir . Output dir for heimdall candidates","title":"your_rfimask.py"},{"location":"bin/your_rfimask/#arguments","text":"Short Long Default Description -h --help show this help message and exit -f --files None filterbank or psrfits -sg --apply_savgol Apply savgol filter to zap bad channels -fw --filter_window [15] Window size (MHz) for savgol filter -sig --sigma [6] Sigma for the savgol filter -o --output_dir . Output dir for heimdall candidates","title":"Arguments"},{"location":"bin/your_writer/","text":"usage: your_writer.py [-h] [-v] -f FILES [FILES ...] -t TYPE [-c CHANS CHANS] [-nstart NSTART] [-nsamp NSAMP] [-o OUTDIR] [-name OUT_NAME] [--no_progress] [-r] [-sksig SK_SIG] [-sgsig SG_SIG] [-sgfw SG_FW] [-zero_dm_subt] Arguments Short Long Default Description -h --help show this help message and exit -v --verbose Be verbose -f --files None Paths of input files to be converted to an output format. Surround with quotes, and either use wildcards or separate with spaces -t --type None Output file type (fits or fil) -c --chans None Required channels (eg -c 0 4096) -nstart --nstart None Start spectra number -nsamp --nsamp None Number of spectra to convert -o --outdir . Output directory for the file -name --out_name None Output name of the file --no_progress None Do not show the tqdm bar -r --flag_rfi Turn on RFI flagging -sksig --sk_sig 4 Sigma for spectral kurtosis filter -sgsig --sg_sig 4 Sigma for savgol filter -sgfw --sg_fw 15 Filter window for savgol filter (MHz) -zero_dm_subt --zero_dm_subt Enable 0 DM subtraction","title":"your_writer.py"},{"location":"bin/your_writer/#arguments","text":"Short Long Default Description -h --help show this help message and exit -v --verbose Be verbose -f --files None Paths of input files to be converted to an output format. Surround with quotes, and either use wildcards or separate with spaces -t --type None Output file type (fits or fil) -c --chans None Required channels (eg -c 0 4096) -nstart --nstart None Start spectra number -nsamp --nsamp None Number of spectra to convert -o --outdir . Output directory for the file -name --out_name None Output name of the file --no_progress None Do not show the tqdm bar -r --flag_rfi Turn on RFI flagging -sksig --sk_sig 4 Sigma for spectral kurtosis filter -sgsig --sg_sig 4 Sigma for savgol filter -sgfw --sg_fw 15 Filter window for savgol filter (MHz) -zero_dm_subt --zero_dm_subt Enable 0 DM subtraction","title":"Arguments"},{"location":"formats/filwriter/","text":"make_sigproc_obj your . formats . filwriter . make_sigproc_obj ( filfile , y , nchans , chan_freq , nstart ) Use Your class to make Sigproc class object with relevant parameters Args: filfile: Name of the Filterbank file y: Your object for the PSRFITS files nchans: No:of channels in the frequency range chan_freq: Required frequency channel range Returns: obj : Object of class SigprocFile write_fil your . formats . filwriter . write_fil ( data , y , nchans = None , chan_freq = None , filename = None , outdir = None , nstart = None ) Write Filterbank file given the Your object Args: data: data to write to the filterbank file y: Your object for the PSRFITS files nchans: No of channels in the frequency range chan_freq: Required frequency channel range filename: Output name of the Filterbank file outdir: Output directory for the Filterbank file nstart: Start sample number","title":"FilWriter"},{"location":"formats/filwriter/#make_sigproc_obj","text":"your . formats . filwriter . make_sigproc_obj ( filfile , y , nchans , chan_freq , nstart ) Use Your class to make Sigproc class object with relevant parameters Args: filfile: Name of the Filterbank file y: Your object for the PSRFITS files nchans: No:of channels in the frequency range chan_freq: Required frequency channel range Returns: obj : Object of class SigprocFile","title":"make_sigproc_obj"},{"location":"formats/filwriter/#write_fil","text":"your . formats . filwriter . write_fil ( data , y , nchans = None , chan_freq = None , filename = None , outdir = None , nstart = None ) Write Filterbank file given the Your object Args: data: data to write to the filterbank file y: Your object for the PSRFITS files nchans: No of channels in the frequency range chan_freq: Required frequency channel range filename: Output name of the Filterbank file outdir: Output directory for the Filterbank file nstart: Start sample number","title":"write_fil"},{"location":"formats/fitswriter/","text":"initialize_psrfits your . formats . fitswriter . initialize_psrfits ( outfile , y , npsub = None ) Set up a PSRFITS file with everything set up EXCEPT the DATA. Args: outfile: path to the output fits file to write to y: your object with the input Filterbank file npsub: number of spectra in a subint ObsInfo your . formats . fitswriter . ObsInfo () Class to setup observation info for psrfits header","title":"FitsWriter"},{"location":"formats/fitswriter/#initialize_psrfits","text":"your . formats . fitswriter . initialize_psrfits ( outfile , y , npsub = None ) Set up a PSRFITS file with everything set up EXCEPT the DATA. Args: outfile: path to the output fits file to write to y: your object with the input Filterbank file npsub: number of spectra in a subint","title":"initialize_psrfits"},{"location":"formats/fitswriter/#obsinfo","text":"your . formats . fitswriter . ObsInfo () Class to setup observation info for psrfits header","title":"ObsInfo"},{"location":"formats/psrdada/","text":"DadaManager your . formats . dada . DadaManager ( size , key = 56026 , n_readers = 1 ) A manager class for psrdada writer. Args: size (int): size of each buffer (in bytes) key (hex): hexadecimal dada key n_readers (int): Number of dada readers. setup DadaManager . setup () Kill any previous buffers with the same key. Set up the dada buffers and connect to a writer. dump_header DadaManager . dump_header ( header ) Set the psrdada header dump_data DadaManager . dump_data ( data_input ) Dump the data to the buffer Args: data_input (numpy.ndarray): Numpy array of the data. mark_filled DadaManager . mark_filled () Mark that data is filled in the buffer page. eod DadaManager . eod () Mark the end of data. teardown DadaManager . teardown () Disconnect the writer and tear down the buffers. YourDada your . formats . dada . YourDada ( your_object ) Linker class between psrdada and your . Args: your_object: your object setup YourDada . setup () Start the dada manager and make the header. teardown YourDada . teardown () Tear down the dada header. your_dada_header YourDada . your_dada_header () Make dada header from your_header . Returns: dict: dada header as a python dictionary. to_dada YourDada . to_dada ( progress = None ) Dump the data to the dada buffer Args: progress: if `False` will not show the progress bar.","title":"Psrdada"},{"location":"formats/psrdada/#dadamanager","text":"your . formats . dada . DadaManager ( size , key = 56026 , n_readers = 1 ) A manager class for psrdada writer. Args: size (int): size of each buffer (in bytes) key (hex): hexadecimal dada key n_readers (int): Number of dada readers.","title":"DadaManager"},{"location":"formats/psrdada/#setup","text":"DadaManager . setup () Kill any previous buffers with the same key. Set up the dada buffers and connect to a writer.","title":"setup"},{"location":"formats/psrdada/#dump_header","text":"DadaManager . dump_header ( header ) Set the psrdada header","title":"dump_header"},{"location":"formats/psrdada/#dump_data","text":"DadaManager . dump_data ( data_input ) Dump the data to the buffer Args: data_input (numpy.ndarray): Numpy array of the data.","title":"dump_data"},{"location":"formats/psrdada/#mark_filled","text":"DadaManager . mark_filled () Mark that data is filled in the buffer page.","title":"mark_filled"},{"location":"formats/psrdada/#eod","text":"DadaManager . eod () Mark the end of data.","title":"eod"},{"location":"formats/psrdada/#teardown","text":"DadaManager . teardown () Disconnect the writer and tear down the buffers.","title":"teardown"},{"location":"formats/psrdada/#yourdada","text":"your . formats . dada . YourDada ( your_object ) Linker class between psrdada and your . Args: your_object: your object","title":"YourDada"},{"location":"formats/psrdada/#setup_1","text":"YourDada . setup () Start the dada manager and make the header.","title":"setup"},{"location":"formats/psrdada/#teardown_1","text":"YourDada . teardown () Tear down the dada header.","title":"teardown"},{"location":"formats/psrdada/#your_dada_header","text":"YourDada . your_dada_header () Make dada header from your_header . Returns: dict: dada header as a python dictionary.","title":"your_dada_header"},{"location":"formats/psrdada/#to_dada","text":"YourDada . to_dada ( progress = None ) Dump the data to the dada buffer Args: progress: if `False` will not show the progress bar.","title":"to_dada"},{"location":"formats/psrfits/","text":"PsrfitsFile your . formats . psrfits . PsrfitsFile ( psrfitslist ) Simple functions for reading psrfits files from python. Not all possible features are implemented. Original Source from Scott Ransom's psrfits . Args: psrfitslist (str): list of files Attributes: filename (str): Name of the first file filelist (list): List of files fileid (int): Index of the current file fits (obj): fits object of the current file read specinfo (obj): Object of class SpectraInfo for the given file list header (list): Header of the fits file source_name (str): Source Name machine_id (int) : Machine ID barycentric (int): If 1 the data is barycentered pulsarcentric (int): Is the data in pulsar's frame of reference? src_raj (float): RA of the source (HHMMSS.SS) src_deg (float): Dec of the source (DDMMSS.SS) az_start (float): Telescope Azimuth (degrees) za_start (float): Telescope Zenith Angle (degrees) fch1 (float): Frequency of first channel (MHz)) foff (float): Channel bandwidth (MHz) nchans (int): Number of channels nbeams (int): Number of beams in the rcvr. ibeam (int): Beam number nbits (int): Number of bits the data are recorded in. tstart (float): Start MJD of the data tsamp (float): Sampling interval (seconds) nifs (int): Number of IFs in the data. read_subint PsrfitsFile . read_subint ( isub , apply_weights = True , apply_scales = True , apply_offsets = True , pol = 0 ) Read a PSRFITS subint from a open pyfits file object. Applys scales, weights, and offsets to the data. Args: isub: index of subint (first subint is 0) apply_weights: If True, apply weights. (Default: apply weights) apply_scales: If True, apply scales. (Default: apply scales) apply_offsets: If True, apply offsets. (Default: apply offsets) Returns: Subint data with scales, weights, and offsets applied in float32 dtype with shape (nsamps,nchan). get_data PsrfitsFile . get_data ( nstart , nsamp , pol = 0 ) Return 2D array of data from PSRFITS files. Args: nstart: Starting sample nsamp: number of samples to read Returns: data: Time-Frequency numpy array SpectraInfo your . formats . psrfits . SpectraInfo ( filenames ) Class to read the header of fits files Args: filenames: list of fits files unpack_2bit your . formats . psrfits . unpack_2bit ( data ) Unpack 2-bit data that has been read in as bytes. Args: data: array of unsigned 2-bit ints packed into an array of bytes. Returns: unpacked array. The size of this array will be four times the size of the input data. unpack_2bit your . formats . psrfits . unpack_2bit ( data ) Unpack 2-bit data that has been read in as bytes. Args: data: array of unsigned 2-bit ints packed into an array of bytes. Returns: unpacked array. The size of this array will be four times the size of the input data. unpack_4bit your . formats . psrfits . unpack_4bit ( data ) Unpack 4-bit data that has been read in as bytes. Args: data: array of unsigned 4-bit ints packed into an array of bytes. Returns: unpacked array. The size of this array will be twice the size of the input data.","title":"Psrfits"},{"location":"formats/psrfits/#psrfitsfile","text":"your . formats . psrfits . PsrfitsFile ( psrfitslist ) Simple functions for reading psrfits files from python. Not all possible features are implemented. Original Source from Scott Ransom's psrfits . Args: psrfitslist (str): list of files Attributes: filename (str): Name of the first file filelist (list): List of files fileid (int): Index of the current file fits (obj): fits object of the current file read specinfo (obj): Object of class SpectraInfo for the given file list header (list): Header of the fits file source_name (str): Source Name machine_id (int) : Machine ID barycentric (int): If 1 the data is barycentered pulsarcentric (int): Is the data in pulsar's frame of reference? src_raj (float): RA of the source (HHMMSS.SS) src_deg (float): Dec of the source (DDMMSS.SS) az_start (float): Telescope Azimuth (degrees) za_start (float): Telescope Zenith Angle (degrees) fch1 (float): Frequency of first channel (MHz)) foff (float): Channel bandwidth (MHz) nchans (int): Number of channels nbeams (int): Number of beams in the rcvr. ibeam (int): Beam number nbits (int): Number of bits the data are recorded in. tstart (float): Start MJD of the data tsamp (float): Sampling interval (seconds) nifs (int): Number of IFs in the data.","title":"PsrfitsFile"},{"location":"formats/psrfits/#read_subint","text":"PsrfitsFile . read_subint ( isub , apply_weights = True , apply_scales = True , apply_offsets = True , pol = 0 ) Read a PSRFITS subint from a open pyfits file object. Applys scales, weights, and offsets to the data. Args: isub: index of subint (first subint is 0) apply_weights: If True, apply weights. (Default: apply weights) apply_scales: If True, apply scales. (Default: apply scales) apply_offsets: If True, apply offsets. (Default: apply offsets) Returns: Subint data with scales, weights, and offsets applied in float32 dtype with shape (nsamps,nchan).","title":"read_subint"},{"location":"formats/psrfits/#get_data","text":"PsrfitsFile . get_data ( nstart , nsamp , pol = 0 ) Return 2D array of data from PSRFITS files. Args: nstart: Starting sample nsamp: number of samples to read Returns: data: Time-Frequency numpy array","title":"get_data"},{"location":"formats/psrfits/#spectrainfo","text":"your . formats . psrfits . SpectraInfo ( filenames ) Class to read the header of fits files Args: filenames: list of fits files","title":"SpectraInfo"},{"location":"formats/psrfits/#unpack_2bit","text":"your . formats . psrfits . unpack_2bit ( data ) Unpack 2-bit data that has been read in as bytes. Args: data: array of unsigned 2-bit ints packed into an array of bytes. Returns: unpacked array. The size of this array will be four times the size of the input data.","title":"unpack_2bit"},{"location":"formats/psrfits/#unpack_2bit_1","text":"your . formats . psrfits . unpack_2bit ( data ) Unpack 2-bit data that has been read in as bytes. Args: data: array of unsigned 2-bit ints packed into an array of bytes. Returns: unpacked array. The size of this array will be four times the size of the input data.","title":"unpack_2bit"},{"location":"formats/psrfits/#unpack_4bit","text":"your . formats . psrfits . unpack_4bit ( data ) Unpack 4-bit data that has been read in as bytes. Args: data: array of unsigned 4-bit ints packed into an array of bytes. Returns: unpacked array. The size of this array will be twice the size of the input data.","title":"unpack_4bit"},{"location":"formats/pysigproc/","text":"SigprocFile your . formats . pysigproc . SigprocFile ( fp = None , copy_hdr = None ) Simple functions for reading sigproc filterbank files from python. Not all possible features are implemented. Original Source from Paul Demorest's pysigproc.py . Args: fp (str): file name copy_hdr (bool): copy header from another SigprocFile class object Attributes: rawdatafile (str): Raw data file source_name (str): Source Name machine_id (int) : Machine ID barycentric (int): If 1 the data is barycentered pulsarcentric (int): Is the data in pulsar's frame of reference? src_raj (float): RA of the source (HHMMSS.SS) src_deg (float): Dec of the source (DDMMSS.SS) az_start (float): Telescope Azimuth (degrees) za_start (float): Telescope Zenith Angle (degrees) fch1 (float): Frequency of first channel (MHz)) foff (float): Channel bandwidth (MHz) nchans (int): Number of channels nbeams (int): Number of beams in the rcvr. ibeam (int): Beam number nbits (int): Number of bits the data are recorded in. tstart (float): Start MJD of the data tsamp (float): Sampling interval (seconds) nifs (int): Number of IFs in the data. get_data SigprocFile . get_data ( nstart , nsamp , offset = 0 , pol = 0 ) Return nsamp time slices starting at nstart. Args: nstart (int): Starting spectra number to start reading from. nsamp (int): Number of spectra to read. offset (int): Can be used to offset reading from. pol (int): Which polarisation to read. Returns: numpy.ndarray: data. unpack SigprocFile . unpack ( nstart , nsamp ) Unpack nsamp time slices starting at nstart to 32-bit floats. Args: nstart (int): Starting spectra number to start reading from. nsamp (int): Number of spectra to read. Returns: numpy.ndarray: Data write_header SigprocFile . write_header ( filename ) Write the filterbank header Args: filename (str): name of the filterbank file append_spectra SigprocFile . append_spectra ( spectra , filename ) Append spectra to the end of the file Args: spectra (numpy.ndarray) : numpy array of the data to be dumped into the filterbank file filename (str): name of the filterbank file","title":"Filterbank"},{"location":"formats/pysigproc/#sigprocfile","text":"your . formats . pysigproc . SigprocFile ( fp = None , copy_hdr = None ) Simple functions for reading sigproc filterbank files from python. Not all possible features are implemented. Original Source from Paul Demorest's pysigproc.py . Args: fp (str): file name copy_hdr (bool): copy header from another SigprocFile class object Attributes: rawdatafile (str): Raw data file source_name (str): Source Name machine_id (int) : Machine ID barycentric (int): If 1 the data is barycentered pulsarcentric (int): Is the data in pulsar's frame of reference? src_raj (float): RA of the source (HHMMSS.SS) src_deg (float): Dec of the source (DDMMSS.SS) az_start (float): Telescope Azimuth (degrees) za_start (float): Telescope Zenith Angle (degrees) fch1 (float): Frequency of first channel (MHz)) foff (float): Channel bandwidth (MHz) nchans (int): Number of channels nbeams (int): Number of beams in the rcvr. ibeam (int): Beam number nbits (int): Number of bits the data are recorded in. tstart (float): Start MJD of the data tsamp (float): Sampling interval (seconds) nifs (int): Number of IFs in the data.","title":"SigprocFile"},{"location":"formats/pysigproc/#get_data","text":"SigprocFile . get_data ( nstart , nsamp , offset = 0 , pol = 0 ) Return nsamp time slices starting at nstart. Args: nstart (int): Starting spectra number to start reading from. nsamp (int): Number of spectra to read. offset (int): Can be used to offset reading from. pol (int): Which polarisation to read. Returns: numpy.ndarray: data.","title":"get_data"},{"location":"formats/pysigproc/#unpack","text":"SigprocFile . unpack ( nstart , nsamp ) Unpack nsamp time slices starting at nstart to 32-bit floats. Args: nstart (int): Starting spectra number to start reading from. nsamp (int): Number of spectra to read. Returns: numpy.ndarray: Data","title":"unpack"},{"location":"formats/pysigproc/#write_header","text":"SigprocFile . write_header ( filename ) Write the filterbank header Args: filename (str): name of the filterbank file","title":"write_header"},{"location":"formats/pysigproc/#append_spectra","text":"SigprocFile . append_spectra ( spectra , filename ) Append spectra to the end of the file Args: spectra (numpy.ndarray) : numpy array of the data to be dumped into the filterbank file filename (str): name of the filterbank file","title":"append_spectra"},{"location":"ipynb/Getting_started/","text":"View in Colab :octicons-octoface: GitHub source Getting Started First install your . ! pip install git + https : // github . com / devanshkv / your . git Collecting git+https://github.com/devanshkv/your.git Cloning https://github.com/devanshkv/your.git to /tmp/pip-req-build-3lsl7ho_ Running command git clone -q https://github.com/devanshkv/your.git /tmp/pip-req-build-3lsl7ho_ Requirement already satisfied (use --upgrade to upgrade): your==0.4.9 from git+https://github.com/devanshkv/your.git in /home/dagarwal/soft/conda/envs/numba_gpu/lib/python3.6/site-packages Building wheels for collected packages: your Building wheel for your (setup.py) ... \u001b[?25ldone \u001b[?25h Created wheel for your: filename=your-0.4.9-py3-none-any.whl size=60606 sha256=51349937de1df5c25ddfd53c2afbdbd8aaaae06eb4c152ae3dcfec8365f92763 Stored in directory: /tmp/pip-ephem-wheel-cache-vwwbzuag/wheels/af/ea/8e/0af2a86dd7ff7d8e91bf3e3d81d82853b1641f749d72144e32 Successfully built your import your Download and extract the a sample filterbank. Here we use the filterbanks containing FRB180417 . import logging logging_format = ' %(asctime)s - %(funcName)s - %(name)s - %(levelname)s - %(message)s ' logging . basicConfig ( level = logging . INFO , format = logging_format ) import os import tarfile import tempfile import pylab as plt from urllib.request import urlretrieve temp_dir = tempfile . TemporaryDirectory () download_path = str ( temp_dir . name ) + '/askap_frb_180417.tgz' url = 'http://astro.phys.wvu.edu/files/askap_frb_180417.tgz' urlretrieve ( url , download_path ,) frb_tar = tarfile . open ( download_path ) frb_tar . extractall ( path = os . path . dirname ( download_path )) fil_file = temp_dir . name + '/28.fil' We can now read the file using your as, your_object = your . Your ( fil_file ) Regardless of the file source, each your object has a unified header which can be accessed as follows. your_header displays all the attributes. These can be accessed as as your_object.your_header.attribute , e.g. to get the sampling interval use your_object.your_header.tsamp . print ( your_object . your_header ) Unified Header: \"basename\": \"28\" \"bw\": -336.0 \"center_freq\": 1297.0 \"dec_deg\": 13.9644755659 \"dtype\": \"uint8\" \"fch1\": 1465.0 \"filelist\": [ \"/tmp/tmp1uiuiwo7/28.fil\" ] \"filename\": \"/tmp/tmp1uiuiwo7/28.fil\" \"foff\": -1.0 \"frequency_decimation_factor\": 1 \"gb\": 75.61933241312582 \"gl\": 97.96004046706304 \"isfil\": true \"isfits\": false \"native_foff\": -1.0 \"native_nchans\": 336 \"native_nspectra\": 5120.0 \"native_tsamp\": 0.00126646875 \"nbits\": 8 \"nchans\": 336 \"npol\": 1 \"nspectra\": 5120.0 \"ra_deg\": 186.656816998 \"source_name\": \"src1\" \"time_decimation_factor\": 1 \"tsamp\": 0.00126646875 \"tstart\": 58682.620316710374 \"tstart_utc\": \"2019-07-18T14:53:15.364\" You can read the data in the file using the get_data method. The output is a numpy array with shape (nsamp, nchans). data = your_object . get_data ( nstart = 0 , nsamp = 4096 ) data . shape (4096, 336) And display the data! plt . figure ( figsize = ( 8 , 6 )) plt . imshow ( data . T , aspect = 'auto' ) plt . xlabel ( \"Time Samples\" ) plt . ylabel ( \"Frequency Channels\" ) plt . colorbar () <matplotlib.colorbar.Colorbar at 0x7f88b2538588> You can create the bandpass of the entire file or a few specific spectra by using your_object.bandpass bandpass = your_object . bandpass () 2020-07-16 18:32:14,514 - bandpass -your.your - WARNING - This will read all the data in the RAM. Might be slow as well. And plot and save the bandpass using the save_bandpass function from your.utils.plotter . from your.utils.plotter import save_bandpass save_bandpass ( your_object , bandpass ) 2020-07-16 18:32:15,114 - _findfont_cached -matplotlib.font_manager - WARNING - findfont: Font family ['serif'] not found. Falling back to DejaVu Sans. 2020-07-16 18:32:15,228 - _findfont_cached -matplotlib.font_manager - WARNING - findfont: Font family ['serif'] not found. Falling back to DejaVu Sans.","title":"Reading"},{"location":"ipynb/Getting_started/#getting-started","text":"First install your . ! pip install git + https : // github . com / devanshkv / your . git Collecting git+https://github.com/devanshkv/your.git Cloning https://github.com/devanshkv/your.git to /tmp/pip-req-build-3lsl7ho_ Running command git clone -q https://github.com/devanshkv/your.git /tmp/pip-req-build-3lsl7ho_ Requirement already satisfied (use --upgrade to upgrade): your==0.4.9 from git+https://github.com/devanshkv/your.git in /home/dagarwal/soft/conda/envs/numba_gpu/lib/python3.6/site-packages Building wheels for collected packages: your Building wheel for your (setup.py) ... \u001b[?25ldone \u001b[?25h Created wheel for your: filename=your-0.4.9-py3-none-any.whl size=60606 sha256=51349937de1df5c25ddfd53c2afbdbd8aaaae06eb4c152ae3dcfec8365f92763 Stored in directory: /tmp/pip-ephem-wheel-cache-vwwbzuag/wheels/af/ea/8e/0af2a86dd7ff7d8e91bf3e3d81d82853b1641f749d72144e32 Successfully built your import your Download and extract the a sample filterbank. Here we use the filterbanks containing FRB180417 . import logging logging_format = ' %(asctime)s - %(funcName)s - %(name)s - %(levelname)s - %(message)s ' logging . basicConfig ( level = logging . INFO , format = logging_format ) import os import tarfile import tempfile import pylab as plt from urllib.request import urlretrieve temp_dir = tempfile . TemporaryDirectory () download_path = str ( temp_dir . name ) + '/askap_frb_180417.tgz' url = 'http://astro.phys.wvu.edu/files/askap_frb_180417.tgz' urlretrieve ( url , download_path ,) frb_tar = tarfile . open ( download_path ) frb_tar . extractall ( path = os . path . dirname ( download_path )) fil_file = temp_dir . name + '/28.fil' We can now read the file using your as, your_object = your . Your ( fil_file ) Regardless of the file source, each your object has a unified header which can be accessed as follows. your_header displays all the attributes. These can be accessed as as your_object.your_header.attribute , e.g. to get the sampling interval use your_object.your_header.tsamp . print ( your_object . your_header ) Unified Header: \"basename\": \"28\" \"bw\": -336.0 \"center_freq\": 1297.0 \"dec_deg\": 13.9644755659 \"dtype\": \"uint8\" \"fch1\": 1465.0 \"filelist\": [ \"/tmp/tmp1uiuiwo7/28.fil\" ] \"filename\": \"/tmp/tmp1uiuiwo7/28.fil\" \"foff\": -1.0 \"frequency_decimation_factor\": 1 \"gb\": 75.61933241312582 \"gl\": 97.96004046706304 \"isfil\": true \"isfits\": false \"native_foff\": -1.0 \"native_nchans\": 336 \"native_nspectra\": 5120.0 \"native_tsamp\": 0.00126646875 \"nbits\": 8 \"nchans\": 336 \"npol\": 1 \"nspectra\": 5120.0 \"ra_deg\": 186.656816998 \"source_name\": \"src1\" \"time_decimation_factor\": 1 \"tsamp\": 0.00126646875 \"tstart\": 58682.620316710374 \"tstart_utc\": \"2019-07-18T14:53:15.364\" You can read the data in the file using the get_data method. The output is a numpy array with shape (nsamp, nchans). data = your_object . get_data ( nstart = 0 , nsamp = 4096 ) data . shape (4096, 336) And display the data! plt . figure ( figsize = ( 8 , 6 )) plt . imshow ( data . T , aspect = 'auto' ) plt . xlabel ( \"Time Samples\" ) plt . ylabel ( \"Frequency Channels\" ) plt . colorbar () <matplotlib.colorbar.Colorbar at 0x7f88b2538588> You can create the bandpass of the entire file or a few specific spectra by using your_object.bandpass bandpass = your_object . bandpass () 2020-07-16 18:32:14,514 - bandpass -your.your - WARNING - This will read all the data in the RAM. Might be slow as well. And plot and save the bandpass using the save_bandpass function from your.utils.plotter . from your.utils.plotter import save_bandpass save_bandpass ( your_object , bandpass ) 2020-07-16 18:32:15,114 - _findfont_cached -matplotlib.font_manager - WARNING - findfont: Font family ['serif'] not found. Falling back to DejaVu Sans. 2020-07-16 18:32:15,228 - _findfont_cached -matplotlib.font_manager - WARNING - findfont: Font family ['serif'] not found. Falling back to DejaVu Sans.","title":"Getting Started"},{"location":"ipynb/candidate_demo/","text":"View in Colab :octicons-octoface: GitHub source How to use Candidate class in Your to analyze candidates from your.candidate import Candidate from your.utils.plotter import plot_h5 import numpy as np from scipy.signal import detrend import os os . environ [ 'HDF5_USE_FILE_LOCKING' ] = 'FALSE' % matplotlib inline import pylab as plt import logging logger = logging . getLogger () logger = logging . basicConfig ( level = logging . INFO , format = ' %(asctime)s - %(name)s - %(threadName)s - %(levelname)s -' ' %(message)s ' ) Here is the heimdall output from our file: S/N, Sample, Time, Width, DM trial, DM, Members, Start Sample, End Sample 88.6941 6305 0.826 1 34 56.838 295 6304 6308 First, we make the candiate object # creating the candidate object with a certain dm, label, snr, tcand and width fits_file = os . path . join ( '../tests/data/28.fits' ) cand = Candidate ( fp = fits_file , dm = 475.28400 , tcand = 2.0288800 , width = 2 , label =- 1 , snr = 16.8128 , min_samp = 256 , device = 0 ) # cand = Candidate(fp=f'Stokes_512I.dat.fil', dm=56.838, label=1, snr=88.694, tcand=0.826, width=2**1) # Get data, this will take data from the filterbank file, and can be accessed from cand.data: cand . get_chunk () print ( cand . data , cand . data . shape , cand . dtype ) [[133 135 141 ... 130 126 110] [159 118 145 ... 143 114 124] [158 142 122 ... 129 158 108] ... [160 141 120 ... 142 113 114] [136 107 146 ... 103 113 120] [160 141 146 ... 113 133 139]] (992, 336) <class 'numpy.uint8'> # here is our dispersed pulse plt . imshow ( cand . data . T , aspect = 'auto' , interpolation = None ) plt . ylabel ( 'Frequency' ) plt . xlabel ( 'Time' ) plt . show () # Now let's make the DM Time plot. This may take a while. cand . dmtime () Using <class 'str'>: ../tests/data/28.fits # the DM time plot can be accessed using cand.dmt. Let's have a look: plt . imshow ( cand . dmt , aspect = 'auto' , interpolation = None ) plt . ylabel ( 'DM' ) plt . xlabel ( 'Time' ) plt . show () # Now let's Dedisperse it! cand . dedisperse () Using <class 'str'>: ../tests/data/28.fits # The dedispersed pulse can be obtained using cand.dedispersed plt . imshow ( cand . dedispersed . T , aspect = 'auto' , interpolation = None ) plt . ylabel ( 'Frequency' ) plt . xlabel ( 'Time' ) plt . show () plt . plot ( cand . dedispersed . T . sum ( 0 )) [<matplotlib.lines.Line2D at 0x7f12d811f4a8>] # Detrending can be used to remove bandpass variations plt . imshow ( detrend ( cand . dedispersed . T ), aspect = 'auto' , interpolation = None ) plt . ylabel ( 'Frequency' ) plt . xlabel ( 'Time' ) plt . show () # Optimise dm could be used to obtain accurate value of dm, and snr at that dm (under testing) cand . optimize_dm () print ( f 'Heimdall reported dm: { cand . dm } , Optimised DM: { cand . dm_opt } ' ) print ( f 'Heimdall reported snr: { cand . snr } , SNR at Opt. DM: { cand . snr_opt } ' ) Heimdall reported dm: 475.284, Optimised DM: 474.7613272736851 Heimdall reported snr: 16.8128, SNR at Opt. DM: 13.458578109741211 # for now, let's enter some random values for dm_opt and snr_opt cand . dm_opt = - 1 cand . snr_opt = - 1 # Name of the candidate cand . id 'cand_tstart_58682.620316710374_tcand_2.0288800_dm_475.28400_snr_16.81280' # Now let's save our candidate in an h5 fout = cand . save_h5 () print ( fout ) 2020-08-12 20:46:36,370 - your.candidate - MainThread - INFO - Saving h5 file cand_tstart_58682.620316710374_tcand_2.0288800_dm_475.28400_snr_16.81280.h5. cand_tstart_58682.620316710374_tcand_2.0288800_dm_475.28400_snr_16.81280.h5 # We will use h5plotter to plot the candidate h5 we just generated plot_h5 ( fout , detrend_ft = False , save = False ) --------------------------------------------------------------------------- ValueError Traceback (most recent call last) <ipython-input-32-2167bde86e0d> in <module> 1 # We will use h5plotter to plot the candidate h5 we just generated ----> 2 plot_h5(fout, detrend_ft=False, save=False) ~/anaconda3/envs/grbfrb/lib/python3.6/site-packages/your-0.4.9-py3.6.egg/your/utils/plotter.py in plot_h5(h5_file, save, detrend_ft, publication, mad_filter, outdir) 153 ax4.axis('off') 154 --> 155 ax1.plot(ts, freq_time.sum(0), 'k-') 156 ax1.set_ylabel('Flux (Arb. Units)') 157 ax2.imshow(freq_time, aspect='auto', extent=[ts[0], ts[-1], fch1, fch1 + (nchan * foff)], interpolation='none') ~/anaconda3/envs/grbfrb/lib/python3.6/site-packages/matplotlib/axes/_axes.py in plot(self, scalex, scaley, data, *args, **kwargs) 1663 \"\"\" 1664 kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D._alias_map) -> 1665 lines = [*self._get_lines(*args, data=data, **kwargs)] 1666 for line in lines: 1667 self.add_line(line) ~/anaconda3/envs/grbfrb/lib/python3.6/site-packages/matplotlib/axes/_base.py in __call__(self, *args, **kwargs) 223 this += args[0], 224 args = args[1:] --> 225 yield from self._plot_args(this, kwargs) 226 227 def get_next_color(self): ~/anaconda3/envs/grbfrb/lib/python3.6/site-packages/matplotlib/axes/_base.py in _plot_args(self, tup, kwargs) 389 x, y = index_of(tup[-1]) 390 --> 391 x, y = self._xy_from_xy(x, y) 392 393 if self.command == 'plot': ~/anaconda3/envs/grbfrb/lib/python3.6/site-packages/matplotlib/axes/_base.py in _xy_from_xy(self, x, y) 268 if x.shape[0] != y.shape[0]: 269 raise ValueError(\"x and y must have same first dimension, but \" --> 270 \"have shapes {} and {}\".format(x.shape, y.shape)) 271 if x.ndim > 2 or y.ndim > 2: 272 raise ValueError(\"x and y can be no greater than 2-D, but have \" ValueError: x and y must have same first dimension, but have shapes (256,) and (992,) <Figure size 432x288 with 0 Axes> Reshaping Freq-time and DM-time arrays dedispersed_bkup = cand . dedispersed dmt_bkup = cand . dmt print ( f 'Shape of dedispersed (frequency-time) data: { dedispersed_bkup . T . shape } ' ) print ( f 'Shape of DM-time data: { dmt_bkup . shape } ' ) Shape of dedispersed (frequency-time) data: (512, 338) Shape of DM-time data: (256, 338) time_size = 256 freq_size = 256 Using resize in skimage.transform for reshaping #resize dedispersed Frequency-time array along time axis cand . resize ( key = 'ft' , size = time_size , axis = 0 , anti_aliasing = True ) #resize dedispersed Frequency-time array along time axis cand . resize ( key = 'ft' , size = freq_size , axis = 1 , anti_aliasing = True ) logging . info ( f 'Resized Frequency-Time data to fsize: { freq_size } and tsize: { time_size } ' ) print ( f 'Shape of dedispersed (frequency-time) data: { cand . dedispersed . T . shape } ' ) 2019-02-21 04:22:57,780 - root - MainThread - INFO - Resized Frequency-Time data to fsize: 256 and tsize: 256 Shape of dedispersed (frequency-time) data: (256, 256) #resize DM-time array along time axis cand . resize ( key = 'dmt' , size = time_size , axis = 1 , anti_aliasing = True ) logging . info ( f 'Resized DM-Time to dmsize: 256 and tsize: { time_size } ' ) print ( f 'Shape of DM-time data: { cand . dmt . shape } ' ) 2019-02-21 04:22:59,386 - root - MainThread - INFO - Resized DM-Time to dmsize: 256 and tsize: 256 Shape of DM-time data: (256, 256) Using decimate for reshaping from candidate import crop cand . dedispersed = dedispersed_bkup cand . dmt = dmt_bkup # Let's use pulse width to decide the decimate factor by which to collape the time axis pulse_width = cand . width if pulse_width == 1 : time_decimate_factor = 1 else : time_decimate_factor = pulse_width // 2 # Decimating time axis, and cropping to the final size cand . decimate ( key = 'ft' , axis = 0 , pad = True , decimate_factor = time_decimate_factor , mode = 'median' ) crop_start_sample_ft = cand . dedispersed . shape [ 0 ] // 2 - time_size // 2 cand . dedispersed = crop ( cand . dedispersed , crop_start_sample_ft , time_size , 0 ) # Decimating frequency axis cand . decimate ( key = 'ft' , axis = 1 , pad = True , decimate_factor = cand . dedispersed . shape [ 1 ] // freq_size , mode = 'median' ) logging . info ( f 'Decimated Frequency-Time data to fsize: { freq_size } and tsize: { time_size } ' ) print ( f 'Shape of dedispersed (frequency-time) data: { cand . dedispersed . T . shape } ' ) 2019-02-21 04:22:59,924 - root - MainThread - INFO - Decimated Frequency-Time data to fsize: 256 and tsize: 256 Shape of dedispersed (frequency-time) data: (256, 256) # Reshaping the DM-time using decimation # Decimating time axis and croppig to the final required size cand . decimate ( key = 'dmt' , axis = 1 , pad = True , decimate_factor = time_decimate_factor , mode = 'median' ) crop_start_sample_dmt = cand . dmt . shape [ 1 ] // 2 - time_size // 2 cand . dmt = crop ( cand . dmt , crop_start_sample_dmt , time_size , 1 ) logging . info ( f 'Decimated DM-Time to dmsize: 256 and tsize: { time_size } ' ) print ( f 'Shape of DM-time data: { cand . dmt . shape } ' ) 2019-02-21 04:23:01,290 - root - MainThread - INFO - Decimated DM-Time to dmsize: 256 and tsize: 256 Shape of DM-time data: (256, 256)","title":"Candidate demo"},{"location":"ipynb/candidate_demo/#how-to-use-candidate-class-in-your-to-analyze-candidates","text":"from your.candidate import Candidate from your.utils.plotter import plot_h5 import numpy as np from scipy.signal import detrend import os os . environ [ 'HDF5_USE_FILE_LOCKING' ] = 'FALSE' % matplotlib inline import pylab as plt import logging logger = logging . getLogger () logger = logging . basicConfig ( level = logging . INFO , format = ' %(asctime)s - %(name)s - %(threadName)s - %(levelname)s -' ' %(message)s ' ) Here is the heimdall output from our file: S/N, Sample, Time, Width, DM trial, DM, Members, Start Sample, End Sample 88.6941 6305 0.826 1 34 56.838 295 6304 6308 First, we make the candiate object # creating the candidate object with a certain dm, label, snr, tcand and width fits_file = os . path . join ( '../tests/data/28.fits' ) cand = Candidate ( fp = fits_file , dm = 475.28400 , tcand = 2.0288800 , width = 2 , label =- 1 , snr = 16.8128 , min_samp = 256 , device = 0 ) # cand = Candidate(fp=f'Stokes_512I.dat.fil', dm=56.838, label=1, snr=88.694, tcand=0.826, width=2**1) # Get data, this will take data from the filterbank file, and can be accessed from cand.data: cand . get_chunk () print ( cand . data , cand . data . shape , cand . dtype ) [[133 135 141 ... 130 126 110] [159 118 145 ... 143 114 124] [158 142 122 ... 129 158 108] ... [160 141 120 ... 142 113 114] [136 107 146 ... 103 113 120] [160 141 146 ... 113 133 139]] (992, 336) <class 'numpy.uint8'> # here is our dispersed pulse plt . imshow ( cand . data . T , aspect = 'auto' , interpolation = None ) plt . ylabel ( 'Frequency' ) plt . xlabel ( 'Time' ) plt . show () # Now let's make the DM Time plot. This may take a while. cand . dmtime () Using <class 'str'>: ../tests/data/28.fits # the DM time plot can be accessed using cand.dmt. Let's have a look: plt . imshow ( cand . dmt , aspect = 'auto' , interpolation = None ) plt . ylabel ( 'DM' ) plt . xlabel ( 'Time' ) plt . show () # Now let's Dedisperse it! cand . dedisperse () Using <class 'str'>: ../tests/data/28.fits # The dedispersed pulse can be obtained using cand.dedispersed plt . imshow ( cand . dedispersed . T , aspect = 'auto' , interpolation = None ) plt . ylabel ( 'Frequency' ) plt . xlabel ( 'Time' ) plt . show () plt . plot ( cand . dedispersed . T . sum ( 0 )) [<matplotlib.lines.Line2D at 0x7f12d811f4a8>] # Detrending can be used to remove bandpass variations plt . imshow ( detrend ( cand . dedispersed . T ), aspect = 'auto' , interpolation = None ) plt . ylabel ( 'Frequency' ) plt . xlabel ( 'Time' ) plt . show () # Optimise dm could be used to obtain accurate value of dm, and snr at that dm (under testing) cand . optimize_dm () print ( f 'Heimdall reported dm: { cand . dm } , Optimised DM: { cand . dm_opt } ' ) print ( f 'Heimdall reported snr: { cand . snr } , SNR at Opt. DM: { cand . snr_opt } ' ) Heimdall reported dm: 475.284, Optimised DM: 474.7613272736851 Heimdall reported snr: 16.8128, SNR at Opt. DM: 13.458578109741211 # for now, let's enter some random values for dm_opt and snr_opt cand . dm_opt = - 1 cand . snr_opt = - 1 # Name of the candidate cand . id 'cand_tstart_58682.620316710374_tcand_2.0288800_dm_475.28400_snr_16.81280' # Now let's save our candidate in an h5 fout = cand . save_h5 () print ( fout ) 2020-08-12 20:46:36,370 - your.candidate - MainThread - INFO - Saving h5 file cand_tstart_58682.620316710374_tcand_2.0288800_dm_475.28400_snr_16.81280.h5. cand_tstart_58682.620316710374_tcand_2.0288800_dm_475.28400_snr_16.81280.h5 # We will use h5plotter to plot the candidate h5 we just generated plot_h5 ( fout , detrend_ft = False , save = False ) --------------------------------------------------------------------------- ValueError Traceback (most recent call last) <ipython-input-32-2167bde86e0d> in <module> 1 # We will use h5plotter to plot the candidate h5 we just generated ----> 2 plot_h5(fout, detrend_ft=False, save=False) ~/anaconda3/envs/grbfrb/lib/python3.6/site-packages/your-0.4.9-py3.6.egg/your/utils/plotter.py in plot_h5(h5_file, save, detrend_ft, publication, mad_filter, outdir) 153 ax4.axis('off') 154 --> 155 ax1.plot(ts, freq_time.sum(0), 'k-') 156 ax1.set_ylabel('Flux (Arb. Units)') 157 ax2.imshow(freq_time, aspect='auto', extent=[ts[0], ts[-1], fch1, fch1 + (nchan * foff)], interpolation='none') ~/anaconda3/envs/grbfrb/lib/python3.6/site-packages/matplotlib/axes/_axes.py in plot(self, scalex, scaley, data, *args, **kwargs) 1663 \"\"\" 1664 kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D._alias_map) -> 1665 lines = [*self._get_lines(*args, data=data, **kwargs)] 1666 for line in lines: 1667 self.add_line(line) ~/anaconda3/envs/grbfrb/lib/python3.6/site-packages/matplotlib/axes/_base.py in __call__(self, *args, **kwargs) 223 this += args[0], 224 args = args[1:] --> 225 yield from self._plot_args(this, kwargs) 226 227 def get_next_color(self): ~/anaconda3/envs/grbfrb/lib/python3.6/site-packages/matplotlib/axes/_base.py in _plot_args(self, tup, kwargs) 389 x, y = index_of(tup[-1]) 390 --> 391 x, y = self._xy_from_xy(x, y) 392 393 if self.command == 'plot': ~/anaconda3/envs/grbfrb/lib/python3.6/site-packages/matplotlib/axes/_base.py in _xy_from_xy(self, x, y) 268 if x.shape[0] != y.shape[0]: 269 raise ValueError(\"x and y must have same first dimension, but \" --> 270 \"have shapes {} and {}\".format(x.shape, y.shape)) 271 if x.ndim > 2 or y.ndim > 2: 272 raise ValueError(\"x and y can be no greater than 2-D, but have \" ValueError: x and y must have same first dimension, but have shapes (256,) and (992,) <Figure size 432x288 with 0 Axes>","title":"How to use Candidate class in Your to analyze candidates"},{"location":"ipynb/candidate_demo/#reshaping-freq-time-and-dm-time-arrays","text":"dedispersed_bkup = cand . dedispersed dmt_bkup = cand . dmt print ( f 'Shape of dedispersed (frequency-time) data: { dedispersed_bkup . T . shape } ' ) print ( f 'Shape of DM-time data: { dmt_bkup . shape } ' ) Shape of dedispersed (frequency-time) data: (512, 338) Shape of DM-time data: (256, 338) time_size = 256 freq_size = 256","title":"Reshaping Freq-time and DM-time arrays"},{"location":"ipynb/candidate_demo/#using-resize-in-skimagetransform-for-reshaping","text":"#resize dedispersed Frequency-time array along time axis cand . resize ( key = 'ft' , size = time_size , axis = 0 , anti_aliasing = True ) #resize dedispersed Frequency-time array along time axis cand . resize ( key = 'ft' , size = freq_size , axis = 1 , anti_aliasing = True ) logging . info ( f 'Resized Frequency-Time data to fsize: { freq_size } and tsize: { time_size } ' ) print ( f 'Shape of dedispersed (frequency-time) data: { cand . dedispersed . T . shape } ' ) 2019-02-21 04:22:57,780 - root - MainThread - INFO - Resized Frequency-Time data to fsize: 256 and tsize: 256 Shape of dedispersed (frequency-time) data: (256, 256) #resize DM-time array along time axis cand . resize ( key = 'dmt' , size = time_size , axis = 1 , anti_aliasing = True ) logging . info ( f 'Resized DM-Time to dmsize: 256 and tsize: { time_size } ' ) print ( f 'Shape of DM-time data: { cand . dmt . shape } ' ) 2019-02-21 04:22:59,386 - root - MainThread - INFO - Resized DM-Time to dmsize: 256 and tsize: 256 Shape of DM-time data: (256, 256)","title":"Using resize in skimage.transform for reshaping"},{"location":"ipynb/candidate_demo/#using-decimate-for-reshaping","text":"from candidate import crop cand . dedispersed = dedispersed_bkup cand . dmt = dmt_bkup # Let's use pulse width to decide the decimate factor by which to collape the time axis pulse_width = cand . width if pulse_width == 1 : time_decimate_factor = 1 else : time_decimate_factor = pulse_width // 2 # Decimating time axis, and cropping to the final size cand . decimate ( key = 'ft' , axis = 0 , pad = True , decimate_factor = time_decimate_factor , mode = 'median' ) crop_start_sample_ft = cand . dedispersed . shape [ 0 ] // 2 - time_size // 2 cand . dedispersed = crop ( cand . dedispersed , crop_start_sample_ft , time_size , 0 ) # Decimating frequency axis cand . decimate ( key = 'ft' , axis = 1 , pad = True , decimate_factor = cand . dedispersed . shape [ 1 ] // freq_size , mode = 'median' ) logging . info ( f 'Decimated Frequency-Time data to fsize: { freq_size } and tsize: { time_size } ' ) print ( f 'Shape of dedispersed (frequency-time) data: { cand . dedispersed . T . shape } ' ) 2019-02-21 04:22:59,924 - root - MainThread - INFO - Decimated Frequency-Time data to fsize: 256 and tsize: 256 Shape of dedispersed (frequency-time) data: (256, 256) # Reshaping the DM-time using decimation # Decimating time axis and croppig to the final required size cand . decimate ( key = 'dmt' , axis = 1 , pad = True , decimate_factor = time_decimate_factor , mode = 'median' ) crop_start_sample_dmt = cand . dmt . shape [ 1 ] // 2 - time_size // 2 cand . dmt = crop ( cand . dmt , crop_start_sample_dmt , time_size , 1 ) logging . info ( f 'Decimated DM-Time to dmsize: 256 and tsize: { time_size } ' ) print ( f 'Shape of DM-time data: { cand . dmt . shape } ' ) 2019-02-21 04:23:01,290 - root - MainThread - INFO - Decimated DM-Time to dmsize: 256 and tsize: 256 Shape of DM-time data: (256, 256)","title":"Using decimate for reshaping"},{"location":"ipynb/writer_demo/","text":"View in Colab :octicons-octoface: GitHub source from your import Your , Writer import os import logging logger = logging . getLogger () logger = logging . basicConfig ( level = logging . INFO , format = ' %(asctime)s - %(name)s - %(threadName)s - %(levelname)s -' ' %(message)s ' ) We can write + convert files using the Writer class in Your Let's read a Psrfits file and write out a Psrfits and a Filterbank file fits_file = '../tests/data/28.fits' y = Your ( fits_file ) w = Writer ( y ) While writing Filterbank files you can also select the required channel and spectra range. w . to_fil ( nstart = 0 , nsamp = 10 , outdir = '.' , outname = 'filfromfits_28.fil' ) 2020-08-13 13:56:41,107 - your.writer - MainThread - INFO - Writing data from spectra 0-10 in the frequency channel range 0-336 to filterbank 2020-08-13 13:56:41,109 - your.utils.filwriter - MainThread - INFO - Trying to write data to filterbank file: ./filfromfits_28.fil 2020-08-13 13:56:41,113 - your.utils.filwriter - MainThread - INFO - Writing 10 spectra to file: ./filfromfits_28.fil 2020-08-13 13:56:41,114 - your.utils.filwriter - MainThread - INFO - Successfully written data to Filterbank file: ./filfromfits_28.fil w . to_fits ( outdir = '.' , outname = 'fitsfromfits_28.fits' ) 2020-08-13 13:56:41,122 - root - MainThread - INFO - ObsInfo updated with relevant parameters 2020-08-13 13:56:41,123 - your.utils.fitswriter - MainThread - INFO - Setting the following info to be written in ./fitsfromfits_28.fits { \"ant_x\": -1601185.63, \"ant_y\": -5041978.15, \"ant_z\": 3554876.43, \"bmaj_deg\": 0.0, \"bmin_deg\": 0.0, \"bpa_deg\": 0.0, \"bw\": 336.0, \"chan_bw\": 1.0, \"dec_str\": \"13:57:52.1120\", \"dt\": 0.00126646875, \"fcenter\": 1297.0, \"file_date\": \"2020-08-13T17:56:41\", \"longitude\": -107.61833443381258, \"nbits\": 8, \"nchan\": 336, \"nsblk\": 789, \"nsuboffs\": 0.0, \"obs_date\": \"2019-07-18T14:53:15\", \"observer\": \"Human\", \"proj_id\": \"Awesome_Project\", \"ra_str\": \"12:26:37.6361\", \"scan_len\": 6.99470690625, \"src_name\": \"src1\", \"stt_imjd\": 58682, \"stt_lst\": 12438.193191755068, \"stt_offs\": 0.3637763159349561, \"stt_smjd\": 53595, \"telescope\": \"VLA\" } 2020-08-13 13:56:41,132 - root - MainThread - INFO - Building the PSRFITS table 2020-08-13 13:56:41,153 - root - MainThread - INFO - Writing PSRFITS table to file: ./fitsfromfits_28.fits 2020-08-13 13:56:41,252 - root - MainThread - INFO - Header information written in ./fitsfromfits_28.fits 2020-08-13 13:56:41,254 - your.writer - MainThread - INFO - Filling PSRFITS file with data 2020-08-13 13:56:41,276 - your.writer - MainThread - INFO - Number of subints to write 7 2020-08-13 13:56:41,277 - your.writer - MainThread - INFO - Writing data to ./fitsfromfits_28.fits from subint = 0 to 7. 2020-08-13 13:56:41,557 - your.writer - MainThread - INFO - All spectra written to ./fitsfromfits_28.fits Let's now read a Filterbank file and write out a Psrfits and a Filterbank file fil_file = '../tests/data/28.fil' y = Your ( fil_file ) w = Writer ( y ) w . to_fil ( nstart = 0 , nsamp = 10 , outdir = '.' , outname = 'filfromfil_28.fil' ) 2020-08-13 13:56:41,692 - your.writer - MainThread - INFO - Writing data from spectra 0-10 in the frequency channel range 0-336 to filterbank 2020-08-13 13:56:41,693 - your.utils.filwriter - MainThread - INFO - Trying to write data to filterbank file: ./filfromfil_28.fil 2020-08-13 13:56:41,699 - your.utils.filwriter - MainThread - INFO - Writing 10 spectra to file: ./filfromfil_28.fil 2020-08-13 13:56:41,701 - your.utils.filwriter - MainThread - INFO - Successfully written data to Filterbank file: ./filfromfil_28.fil w . to_fits ( outdir = '.' , outname = 'fitsfromfil_28.fits' ) 2020-08-13 13:56:41,712 - root - MainThread - INFO - ObsInfo updated with relevant parameters 2020-08-13 13:56:41,713 - your.utils.fitswriter - MainThread - INFO - Setting the following info to be written in ./fitsfromfil_28.fits { \"ant_x\": -1601185.63, \"ant_y\": -5041978.15, \"ant_z\": 3554876.43, \"bmaj_deg\": 0.0, \"bmin_deg\": 0.0, \"bpa_deg\": 0.0, \"bw\": 336.0, \"chan_bw\": 1.0, \"dec_str\": \"13:57:52.1120\", \"dt\": 0.00126646875, \"fcenter\": 1297.5, \"file_date\": \"2020-08-13T17:56:41\", \"longitude\": -107.61833443381258, \"nbits\": 8, \"nchan\": 336, \"nsblk\": 789, \"nsuboffs\": 0.0, \"obs_date\": \"2019-07-18T14:53:15\", \"observer\": \"Human\", \"proj_id\": \"Awesome_Project\", \"ra_str\": \"12:26:37.6361\", \"scan_len\": 6.99470690625, \"src_name\": \"src1\", \"stt_imjd\": 58682, \"stt_lst\": 12438.193191755068, \"stt_offs\": 0.3637763159349561, \"stt_smjd\": 53595, \"telescope\": \"VLA\" } 2020-08-13 13:56:41,729 - root - MainThread - INFO - Building the PSRFITS table 2020-08-13 13:56:41,769 - root - MainThread - INFO - Writing PSRFITS table to file: ./fitsfromfil_28.fits 2020-08-13 13:56:41,832 - root - MainThread - INFO - Header information written in ./fitsfromfil_28.fits 2020-08-13 13:56:41,834 - your.writer - MainThread - INFO - Filling PSRFITS file with data 2020-08-13 13:56:41,862 - your.writer - MainThread - INFO - Number of subints to write 7 2020-08-13 13:56:41,863 - your.writer - MainThread - INFO - Writing data to ./fitsfromfil_28.fits from subint = 0 to 7. 2020-08-13 13:56:42,132 - your.writer - MainThread - INFO - All spectra written to ./fitsfromfil_28.fits and then we can use Your to read those files. Here is an example. Take a look at Getting Started for more details on using Your. y = Your ( 'filfromfil_28.fil' ) y . your_header Unified Header: \"basename\": \"filfromfil_28\" \"bw\": -336.0 \"center_freq\": 1297.0 \"dec_deg\": 13.964475555555554 \"dtype\": \"uint8\" \"fch1\": 1465.0 \"filelist\": [ \"filfromfil_28.fil\" ] \"filename\": \"filfromfil_28.fil\" \"foff\": -1.0 \"frequency_decimation_factor\": 1 \"gb\": 75.6193324356504 \"gl\": 97.96004079061277 \"isfil\": true \"isfits\": false \"native_foff\": -1.0 \"native_nchans\": 336 \"native_nspectra\": 10.0 \"native_tsamp\": 0.00126646875 \"nbits\": 8 \"nchans\": 336 \"npol\": 1 \"nspectra\": 10.0 \"ra_deg\": 186.65681708333335 \"source_name\": \"src1\" \"time_decimation_factor\": 1 \"tsamp\": 0.00126646875 \"tstart\": 58682.620316710374 \"tstart_utc\": \"2019-07-18T14:53:15.364\"","title":"Writing"},{"location":"utils/astro/","text":"dec2deg your . utils . astro . dec2deg ( src_dej ) Convert the SIGPROC-style DDMMSS.SSSS declination to degrees Args: src_dej (float): Source dec ra2deg your . utils . astro . ra2deg ( src_raj ) Convert the SIGPROC-style HHMMSS.SSSS right ascension to degrees Args: src_raj (float): Source RA","title":"Astro"},{"location":"utils/astro/#dec2deg","text":"your . utils . astro . dec2deg ( src_dej ) Convert the SIGPROC-style DDMMSS.SSSS declination to degrees Args: src_dej (float): Source dec","title":"dec2deg"},{"location":"utils/astro/#ra2deg","text":"your . utils . astro . ra2deg ( src_raj ) Convert the SIGPROC-style HHMMSS.SSSS right ascension to degrees Args: src_raj (float): Source RA","title":"ra2deg"},{"location":"utils/gpu/","text":"gpu_dedisperse your . utils . gpu . gpu_dedisperse ( cand , device = 0 ) GPU dedispersion (by rolling the array) Args: cand: Candidate instance device (int): GPU ID Returns: candidate object gpu_dmt your . utils . gpu . gpu_dmt ( cand , device = 0 ) GPU DM-Time bow-tie (by rolling the array) Args: cand: Candidate instance device (int): GPU ID Returns: candidate object gpu_dedisp_and_dmt_crop your . utils . gpu . gpu_dedisp_and_dmt_crop ( cand , device = 0 ) GPU based dedispersion, DM time bow-time plot and crop it to 256x256 shaped arrays (by rolling the array) Args: cand: Candidate instance device (int): GPU ID Returns: candidate object get_gpu_memory_map your . utils . gpu . get_gpu_memory_map ( gpu_id ) Get the current gpu free memory Args: gpu_id (int): GPU id Returns: int: amount of free GPU RAM","title":"GPU"},{"location":"utils/gpu/#gpu_dedisperse","text":"your . utils . gpu . gpu_dedisperse ( cand , device = 0 ) GPU dedispersion (by rolling the array) Args: cand: Candidate instance device (int): GPU ID Returns: candidate object","title":"gpu_dedisperse"},{"location":"utils/gpu/#gpu_dmt","text":"your . utils . gpu . gpu_dmt ( cand , device = 0 ) GPU DM-Time bow-tie (by rolling the array) Args: cand: Candidate instance device (int): GPU ID Returns: candidate object","title":"gpu_dmt"},{"location":"utils/gpu/#gpu_dedisp_and_dmt_crop","text":"your . utils . gpu . gpu_dedisp_and_dmt_crop ( cand , device = 0 ) GPU based dedispersion, DM time bow-time plot and crop it to 256x256 shaped arrays (by rolling the array) Args: cand: Candidate instance device (int): GPU ID Returns: candidate object","title":"gpu_dedisp_and_dmt_crop"},{"location":"utils/gpu/#get_gpu_memory_map","text":"your . utils . gpu . get_gpu_memory_map ( gpu_id ) Get the current gpu free memory Args: gpu_id (int): GPU id Returns: int: amount of free GPU RAM","title":"get_gpu_memory_map"},{"location":"utils/heimdall/","text":"HeimdallManager your . utils . heimdall . HeimdallManager ( dada_key = None , filename = None , verbosity = None , nsamps_gulp = 262144 , beam = None , baseline_length = 2 , output_dir = None , dm = None , dm_tol = 1.25 , zap_chans = None , max_giant_rate = None , dm_nbits = 32 , gpu_id = None , no_scrunching = False , rfi_tol = 5 , rfi_no_narrow = False , rfi_no_broad = False , boxcar_max = 4096 , fswap = None , min_tscrunch_width = None , ) So you want to run heimdall, here is wrapper class which will allow you to do just that. Args: dada_key (hex): use PSRDADA hexidecimal key filename (str): process specified SIGPROC filterbank file verbosity (str): v, V, g, G increase verbosity level nsamps_gulp (int): number of samples to be read at a time beam (int) : over-ride beam number baseline_length (float): number of seconds over which to smooth the baseline output_dir (str) : create all output files in specified path dm (list): min and max DM dm_tol (float): SNR loss tolerance between each DM trial zap_chans (int): zap all channels between start and end channels inclusive max_giant_rate (int): limit the maximum number of individual detections per minute to nevents dm_nbits (int): number of bits per sample in dedispersed time series gpu_id (int): run on specified GPU no_scrunching (bool): don't use an adaptive time scrunching during dedispersion rfi_tol (float): RFI exicision threshold limits rfi_no_narrow (bool): disable narrow band RFI excision rfi_no_broad (bool): disable 0-DM RFI excision boxcar_max (int): maximum boxcar width in samples fswap (bool): swap channel ordering for negative DM - SIGPROC 2,4 or 8 bit only min_tscrunch_width: vary between high quality (large value) and high performance (low value) run HeimdallManager . run () Make the heimdall command and run it.","title":"Heimdall"},{"location":"utils/heimdall/#heimdallmanager","text":"your . utils . heimdall . HeimdallManager ( dada_key = None , filename = None , verbosity = None , nsamps_gulp = 262144 , beam = None , baseline_length = 2 , output_dir = None , dm = None , dm_tol = 1.25 , zap_chans = None , max_giant_rate = None , dm_nbits = 32 , gpu_id = None , no_scrunching = False , rfi_tol = 5 , rfi_no_narrow = False , rfi_no_broad = False , boxcar_max = 4096 , fswap = None , min_tscrunch_width = None , ) So you want to run heimdall, here is wrapper class which will allow you to do just that. Args: dada_key (hex): use PSRDADA hexidecimal key filename (str): process specified SIGPROC filterbank file verbosity (str): v, V, g, G increase verbosity level nsamps_gulp (int): number of samples to be read at a time beam (int) : over-ride beam number baseline_length (float): number of seconds over which to smooth the baseline output_dir (str) : create all output files in specified path dm (list): min and max DM dm_tol (float): SNR loss tolerance between each DM trial zap_chans (int): zap all channels between start and end channels inclusive max_giant_rate (int): limit the maximum number of individual detections per minute to nevents dm_nbits (int): number of bits per sample in dedispersed time series gpu_id (int): run on specified GPU no_scrunching (bool): don't use an adaptive time scrunching during dedispersion rfi_tol (float): RFI exicision threshold limits rfi_no_narrow (bool): disable narrow band RFI excision rfi_no_broad (bool): disable 0-DM RFI excision boxcar_max (int): maximum boxcar width in samples fswap (bool): swap channel ordering for negative DM - SIGPROC 2,4 or 8 bit only min_tscrunch_width: vary between high quality (large value) and high performance (low value)","title":"HeimdallManager"},{"location":"utils/heimdall/#run","text":"HeimdallManager . run () Make the heimdall command and run it.","title":"run"},{"location":"utils/math/","text":"closest_number your . utils . math . closest_number ( big_num , small_num ) Finds the difference between the closest multiple of a smaller number with respect to a bigger number Args: big_num: The bigger number to find the closest of small_num: Number whose multiple is to be found and subtracted Returns: The difference between the closest multiple of a smaller number with respect to a bigger number primes your . utils . math . primes ( n ) All the prime factors of a positive number Args: n: a positive number Returns: primes closest_divisor your . utils . math . closest_divisor ( n , m ) Calculates the divisor of n, which is closest to (i.e bigger than) m Args: n: larger number of which divisor is to be found m: divisor closest to this number Returns: The divisor of n, which is closest to (i.e bigger than) m find_gcd your . utils . math . find_gcd ( list_of_nos ) Greatest Common Divisor for a list of nos Args: list_of_nos: list of numbers Returns: GCD normalise your . utils . math . normalise ( data ) Subtract median, divide by standard deviations Args: data (numpy.ndarray): data Returns: numpy.ndarray: normalised data smad_plotter your . utils . math . smad_plotter ( freq_time , sigma = 5.0 , clip = True ) spectal Median Absolute Deviation clipper Args: freq_time: the frequency time data sigma (float): sigma at which to clip data clip (bool): if true replaces clips the data else replaces it with zeroes Returns: np.ndarray: clipped/flagged data","title":"Math"},{"location":"utils/math/#closest_number","text":"your . utils . math . closest_number ( big_num , small_num ) Finds the difference between the closest multiple of a smaller number with respect to a bigger number Args: big_num: The bigger number to find the closest of small_num: Number whose multiple is to be found and subtracted Returns: The difference between the closest multiple of a smaller number with respect to a bigger number","title":"closest_number"},{"location":"utils/math/#primes","text":"your . utils . math . primes ( n ) All the prime factors of a positive number Args: n: a positive number Returns: primes","title":"primes"},{"location":"utils/math/#closest_divisor","text":"your . utils . math . closest_divisor ( n , m ) Calculates the divisor of n, which is closest to (i.e bigger than) m Args: n: larger number of which divisor is to be found m: divisor closest to this number Returns: The divisor of n, which is closest to (i.e bigger than) m","title":"closest_divisor"},{"location":"utils/math/#find_gcd","text":"your . utils . math . find_gcd ( list_of_nos ) Greatest Common Divisor for a list of nos Args: list_of_nos: list of numbers Returns: GCD","title":"find_gcd"},{"location":"utils/math/#normalise","text":"your . utils . math . normalise ( data ) Subtract median, divide by standard deviations Args: data (numpy.ndarray): data Returns: numpy.ndarray: normalised data","title":"normalise"},{"location":"utils/math/#smad_plotter","text":"your . utils . math . smad_plotter ( freq_time , sigma = 5.0 , clip = True ) spectal Median Absolute Deviation clipper Args: freq_time: the frequency time data sigma (float): sigma at which to clip data clip (bool): if true replaces clips the data else replaces it with zeroes Returns: np.ndarray: clipped/flagged data","title":"smad_plotter"},{"location":"utils/misc/","text":"crop your . utils . misc . crop ( data , start_sample , length , axis ) Crops the input array to a required size Args: data: Data array to crop start_sample: Sample to start the output cropped array length: Final Length along the axis of the output axis: Axis to crop Returns: Cropped array pad_along_axis your . utils . misc . pad_along_axis ( array , target_length , loc = \"end\" , axis = 0 , ** kwargs ) Pads data along the required axis on the input array to reach a target size Args: array: Input array to pad target_length: Required length of the axis loc: Location to pad: start: pad in beginning, end: pad in end, else: pad equally on both sides axis: Axis to pad along Returns: Padded array MyEncoder your . utils . misc . MyEncoder ( * , skipkeys = False , ensure_ascii = True , check_circular = True , allow_nan = True , sort_keys = False , indent = None , separators = None , default = None ) Custom Encoder Class to convert any class to a JSON serializable object","title":"Misc"},{"location":"utils/misc/#crop","text":"your . utils . misc . crop ( data , start_sample , length , axis ) Crops the input array to a required size Args: data: Data array to crop start_sample: Sample to start the output cropped array length: Final Length along the axis of the output axis: Axis to crop Returns: Cropped array","title":"crop"},{"location":"utils/misc/#pad_along_axis","text":"your . utils . misc . pad_along_axis ( array , target_length , loc = \"end\" , axis = 0 , ** kwargs ) Pads data along the required axis on the input array to reach a target size Args: array: Input array to pad target_length: Required length of the axis loc: Location to pad: start: pad in beginning, end: pad in end, else: pad equally on both sides axis: Axis to pad along Returns: Padded array","title":"pad_along_axis"},{"location":"utils/misc/#myencoder","text":"your . utils . misc . MyEncoder ( * , skipkeys = False , ensure_ascii = True , check_circular = True , allow_nan = True , sort_keys = False , indent = None , separators = None , default = None ) Custom Encoder Class to convert any class to a JSON serializable object","title":"MyEncoder"},{"location":"utils/plotter/","text":"figsize your . utils . plotter . figsize ( scale , width_by_height_ratio ) Create figure size either a full page or a half page figure Args: scale (float): 0.5 for half page figure, 1 for full page width_by_height_ratio (float): ratio of width to height for the figure Returns: list: list of width and height get_params your . utils . plotter . get_params ( scale = 0.5 , width_by_height_ratio = 1 ) Create a dictionary for pretty plotting Args: scale (float): 0.5 for half page figure, 1 for full page width_by_height_ratio (float): ratio of width to height for the figure Returns: dict: dictionary of parameters plot_h5 your . utils . plotter . plot_h5 ( h5_file , save = True , detrend_ft = True , publication = False , mad_filter = False , outdir = None ) Plot the h5 candidates Args: mad_filter (int): use MAD filter to clip data h5_file (str): Name of the h5 file save (bool): Save the file as a png detrend_ft (bool): detrend the frequency time plot publication (bool): make publication quality plot outdir (str): Path to the save the files into. Returns: None save_bandpass your . utils . plotter . save_bandpass ( your_object , bandpass , chan_nos = None , mask = None , outdir = None , outname = None ) Plots and saves the bandpass Args: your_object: Your object bandpass (np.ndarray): Bandpass of the data chan_nos (np.ndarray): Array of channel numbers mask (np.ndarray): Boolean Array of channel mask outdir (str) : Output directory to save the plot outname (str): Name of the bandpass file","title":"Plotter"},{"location":"utils/plotter/#figsize","text":"your . utils . plotter . figsize ( scale , width_by_height_ratio ) Create figure size either a full page or a half page figure Args: scale (float): 0.5 for half page figure, 1 for full page width_by_height_ratio (float): ratio of width to height for the figure Returns: list: list of width and height","title":"figsize"},{"location":"utils/plotter/#get_params","text":"your . utils . plotter . get_params ( scale = 0.5 , width_by_height_ratio = 1 ) Create a dictionary for pretty plotting Args: scale (float): 0.5 for half page figure, 1 for full page width_by_height_ratio (float): ratio of width to height for the figure Returns: dict: dictionary of parameters","title":"get_params"},{"location":"utils/plotter/#plot_h5","text":"your . utils . plotter . plot_h5 ( h5_file , save = True , detrend_ft = True , publication = False , mad_filter = False , outdir = None ) Plot the h5 candidates Args: mad_filter (int): use MAD filter to clip data h5_file (str): Name of the h5 file save (bool): Save the file as a png detrend_ft (bool): detrend the frequency time plot publication (bool): make publication quality plot outdir (str): Path to the save the files into. Returns: None","title":"plot_h5"},{"location":"utils/plotter/#save_bandpass","text":"your . utils . plotter . save_bandpass ( your_object , bandpass , chan_nos = None , mask = None , outdir = None , outname = None ) Plots and saves the bandpass Args: your_object: Your object bandpass (np.ndarray): Bandpass of the data chan_nos (np.ndarray): Array of channel numbers mask (np.ndarray): Boolean Array of channel mask outdir (str) : Output directory to save the plot outname (str): Name of the bandpass file","title":"save_bandpass"},{"location":"utils/rfi/","text":"savgol_filter your . utils . rfi . savgol_filter ( data , foff , fw = 15 , sig = 6 ) Apply savgol filter to the data. See Agarwal el al. 2020 for details. Args: data (numpy.ndarray): bandpass of the data foff (float): channel bandwidth (MHz) fw (float): frequency window (MHz) sig (float): sigma value to apply cutoff on Returns: numpy.ndarray: mask for channels spectral_kurtosis your . utils . rfi . spectral_kurtosis ( data , N = 1 , d = None ) Compute spectral kurtosis. See Nita et al. (2016) for details. Args: data (numpy.ndarray): 2D frequency time data N (int): Number of accumulations on the FPGA d (float): shape factor Returns: numpy.ndarray: Spectral Kurtosis along frequency axis","title":"RFI"},{"location":"utils/rfi/#savgol_filter","text":"your . utils . rfi . savgol_filter ( data , foff , fw = 15 , sig = 6 ) Apply savgol filter to the data. See Agarwal el al. 2020 for details. Args: data (numpy.ndarray): bandpass of the data foff (float): channel bandwidth (MHz) fw (float): frequency window (MHz) sig (float): sigma value to apply cutoff on Returns: numpy.ndarray: mask for channels","title":"savgol_filter"},{"location":"utils/rfi/#spectral_kurtosis","text":"your . utils . rfi . spectral_kurtosis ( data , N = 1 , d = None ) Compute spectral kurtosis. See Nita et al. (2016) for details. Args: data (numpy.ndarray): 2D frequency time data N (int): Number of accumulations on the FPGA d (float): shape factor Returns: numpy.ndarray: Spectral Kurtosis along frequency axis","title":"spectral_kurtosis"}]}